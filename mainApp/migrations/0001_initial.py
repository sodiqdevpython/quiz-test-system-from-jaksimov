# Generated by Django 5.2.5 on 2025-09-02 13:29

import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
import django.db.models.deletion
import django.utils.timezone
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Category',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=255, verbose_name='Kategoriya nomi')),
            ],
            options={
                'verbose_name': 'Kategoriya',
                'verbose_name_plural': 'Kategoriyalar',
            },
        ),
        migrations.CreateModel(
            name='Group',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=255, verbose_name='Guruh nomi')),
                ('kurs', models.PositiveIntegerField(verbose_name='Kurs')),
            ],
            options={
                'verbose_name': 'Guruh',
                'verbose_name_plural': 'Guruhlar',
            },
        ),
        migrations.CreateModel(
            name='Question',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('text', models.TextField(blank=True, null=True, verbose_name='Savol matni')),
                ('image', models.ImageField(blank=True, null=True, upload_to='questions/', verbose_name='Savol rasmi')),
            ],
            options={
                'verbose_name': 'Savol',
                'verbose_name_plural': 'Savollar',
            },
        ),
        migrations.CreateModel(
            name='Test',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=255, verbose_name='Test nomi')),
                ('default_duration', models.PositiveIntegerField(default=30, verbose_name='Standart davomiyligi (minut)')),
                ('question_count', models.PositiveIntegerField(default=0, verbose_name='Savollar soni')),
            ],
            options={
                'verbose_name': 'Test',
                'verbose_name_plural': 'Testlar',
            },
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('role', models.CharField(choices=[('student', 'Student'), ('teacher', 'Teacher'), ('admin', 'Admin')], default='student', max_length=50, verbose_name='Rol')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
                ('group', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='mainApp.group', verbose_name='Guruh')),
            ],
            options={
                'verbose_name': 'Foydalanuvchi',
                'verbose_name_plural': 'Foydalanuvchilar',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Option',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('text', models.TextField(blank=True, null=True, verbose_name='Variant matni')),
                ('image', models.ImageField(blank=True, null=True, upload_to='options/', verbose_name='Variant rasmi')),
                ('is_correct', models.BooleanField(default=False, verbose_name="To'g'ri javob")),
                ('question', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='options', to='mainApp.question', verbose_name='Savol')),
            ],
            options={
                'verbose_name': 'Variant',
                'verbose_name_plural': 'Variantlar',
            },
        ),
        migrations.CreateModel(
            name='Subject',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=255, verbose_name='Fan nomi')),
                ('theme_count', models.PositiveIntegerField(default=0, verbose_name='Mavzular soni')),
                ('authors', models.ManyToManyField(blank=True, to=settings.AUTH_USER_MODEL, verbose_name='Mualliflar')),
                ('category', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='subjects', to='mainApp.category', verbose_name='Kategoriya')),
            ],
            options={
                'verbose_name': 'Fan',
                'verbose_name_plural': 'Fanlar',
            },
        ),
        migrations.AddField(
            model_name='question',
            name='test',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='questions', to='mainApp.test', verbose_name='Test'),
        ),
        migrations.CreateModel(
            name='TestAttempt',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('mode', models.CharField(choices=[('sequential', 'Ketma-ket rejim'), ('all_in_one', "Ko'p qismli rejim")], default='sequential', max_length=20, verbose_name='Rejim')),
                ('started_at', models.DateTimeField(auto_now_add=True, verbose_name='Boshlangan vaqt')),
                ('finished_at', models.DateTimeField(blank=True, null=True, verbose_name='Tugallangan vaqt')),
                ('score', models.FloatField(blank=True, null=True, verbose_name='Ball')),
                ('duration', models.PositiveIntegerField(blank=True, null=True, verbose_name='Sarflangan vaqt (minut)')),
                ('test', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='attempts', to='mainApp.test', verbose_name='Test')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='attempts', to=settings.AUTH_USER_MODEL, verbose_name='Foydalanuvchi')),
            ],
            options={
                'verbose_name': 'Test Urinishi',
                'verbose_name_plural': 'Test Urinishlari',
            },
        ),
        migrations.CreateModel(
            name='Answer',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('is_correct', models.BooleanField(default=False, verbose_name="To'g'ri javob")),
                ('selected_option', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='mainApp.option', verbose_name='Tanlangan variant')),
                ('question', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='mainApp.question', verbose_name='Savol')),
                ('attempt', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='answers', to='mainApp.testattempt', verbose_name='Urinish')),
            ],
            options={
                'verbose_name': 'Javob',
                'verbose_name_plural': 'Javoblar',
            },
        ),
        migrations.CreateModel(
            name='Theme',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=255, verbose_name='Mavzu nomi')),
                ('duration', models.PositiveIntegerField(default=0, verbose_name='Davomiyligi (minut)')),
                ('full_html_file', models.TextField(blank=True, null=True, verbose_name="To'liq matn (HTML)")),
                ('subject', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='themes', to='mainApp.subject', verbose_name='Fan')),
            ],
            options={
                'verbose_name': 'Mavzu',
                'verbose_name_plural': 'Mavzular',
            },
        ),
        migrations.CreateModel(
            name='TestImportFile',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('file', models.FileField(help_text='Doc yoki docx formatdagi faylni yuklang', upload_to='test_imports/', validators=[django.core.validators.FileExtensionValidator(allowed_extensions=['doc', 'docx'])], verbose_name='Test fayli')),
                ('theme', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='import_files', to='mainApp.theme', verbose_name='Mavzu')),
            ],
            options={
                'verbose_name': 'Test Import Fayli',
                'verbose_name_plural': 'Test Import Fayllari',
            },
        ),
        migrations.AddField(
            model_name='test',
            name='theme',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='tests', to='mainApp.theme', verbose_name='Mavzu'),
        ),
    ]
