[
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "get_asgi_application",
        "importPath": "django.core.asgi",
        "description": "django.core.asgi",
        "isExtraImport": true,
        "detail": "django.core.asgi",
        "documentation": {}
    },
    {
        "label": "Celery",
        "importPath": "celery",
        "description": "celery",
        "isExtraImport": true,
        "detail": "celery",
        "documentation": {}
    },
    {
        "label": "shared_task",
        "importPath": "celery",
        "description": "celery",
        "isExtraImport": true,
        "detail": "celery",
        "documentation": {}
    },
    {
        "label": "shared_task",
        "importPath": "celery",
        "description": "celery",
        "isExtraImport": true,
        "detail": "celery",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "pathlib",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pathlib",
        "description": "pathlib",
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "include",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "static",
        "importPath": "django.conf.urls.static",
        "description": "django.conf.urls.static",
        "isExtraImport": true,
        "detail": "django.conf.urls.static",
        "documentation": {}
    },
    {
        "label": "HttpResponse",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "require_GET",
        "importPath": "django.views.decorators.http",
        "description": "django.views.decorators.http",
        "isExtraImport": true,
        "detail": "django.views.decorators.http",
        "documentation": {}
    },
    {
        "label": "permissions",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "serializers",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "generics",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "generics",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "permissions",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "serializers",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "permissions",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "filters",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "generics",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "serializers",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "generics",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "permissions",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "serializers",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "generics",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "get_schema_view",
        "importPath": "drf_yasg.views",
        "description": "drf_yasg.views",
        "isExtraImport": true,
        "detail": "drf_yasg.views",
        "documentation": {}
    },
    {
        "label": "openapi",
        "importPath": "drf_yasg",
        "description": "drf_yasg",
        "isExtraImport": true,
        "detail": "drf_yasg",
        "documentation": {}
    },
    {
        "label": "get_wsgi_application",
        "importPath": "django.core.wsgi",
        "description": "django.core.wsgi",
        "isExtraImport": true,
        "detail": "django.core.wsgi",
        "documentation": {}
    },
    {
        "label": "django.db.models.deletion",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "django.db.models.deletion",
        "description": "django.db.models.deletion",
        "detail": "django.db.models.deletion",
        "documentation": {}
    },
    {
        "label": "uuid",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "uuid",
        "description": "uuid",
        "detail": "uuid",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "Group",
        "importPath": "mainApp.models",
        "description": "mainApp.models",
        "isExtraImport": true,
        "detail": "mainApp.models",
        "documentation": {}
    },
    {
        "label": "Group",
        "importPath": "mainApp.models",
        "description": "mainApp.models",
        "isExtraImport": true,
        "detail": "mainApp.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "mainApp.models",
        "description": "mainApp.models",
        "isExtraImport": true,
        "detail": "mainApp.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "mainApp.models",
        "description": "mainApp.models",
        "isExtraImport": true,
        "detail": "mainApp.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "mainApp.models",
        "description": "mainApp.models",
        "isExtraImport": true,
        "detail": "mainApp.models",
        "documentation": {}
    },
    {
        "label": "Theme",
        "importPath": "mainApp.models",
        "description": "mainApp.models",
        "isExtraImport": true,
        "detail": "mainApp.models",
        "documentation": {}
    },
    {
        "label": "Test",
        "importPath": "mainApp.models",
        "description": "mainApp.models",
        "isExtraImport": true,
        "detail": "mainApp.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "mainApp.models",
        "description": "mainApp.models",
        "isExtraImport": true,
        "detail": "mainApp.models",
        "documentation": {}
    },
    {
        "label": "Group",
        "importPath": "mainApp.models",
        "description": "mainApp.models",
        "isExtraImport": true,
        "detail": "mainApp.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "mainApp.models",
        "description": "mainApp.models",
        "isExtraImport": true,
        "detail": "mainApp.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "mainApp.models",
        "description": "mainApp.models",
        "isExtraImport": true,
        "detail": "mainApp.models",
        "documentation": {}
    },
    {
        "label": "TestAttempt",
        "importPath": "mainApp.models",
        "description": "mainApp.models",
        "isExtraImport": true,
        "detail": "mainApp.models",
        "documentation": {}
    },
    {
        "label": "Group",
        "importPath": "mainApp.models",
        "description": "mainApp.models",
        "isExtraImport": true,
        "detail": "mainApp.models",
        "documentation": {}
    },
    {
        "label": "Test",
        "importPath": "mainApp.models",
        "description": "mainApp.models",
        "isExtraImport": true,
        "detail": "mainApp.models",
        "documentation": {}
    },
    {
        "label": "Answer",
        "importPath": "mainApp.models",
        "description": "mainApp.models",
        "isExtraImport": true,
        "detail": "mainApp.models",
        "documentation": {}
    },
    {
        "label": "Question",
        "importPath": "mainApp.models",
        "description": "mainApp.models",
        "isExtraImport": true,
        "detail": "mainApp.models",
        "documentation": {}
    },
    {
        "label": "Subject",
        "importPath": "mainApp.models",
        "description": "mainApp.models",
        "isExtraImport": true,
        "detail": "mainApp.models",
        "documentation": {}
    },
    {
        "label": "Theme",
        "importPath": "mainApp.models",
        "description": "mainApp.models",
        "isExtraImport": true,
        "detail": "mainApp.models",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "utils.models",
        "description": "utils.models",
        "isExtraImport": true,
        "detail": "utils.models",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "utils.models",
        "description": "utils.models",
        "isExtraImport": true,
        "detail": "utils.models",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "utils.models",
        "description": "utils.models",
        "isExtraImport": true,
        "detail": "utils.models",
        "documentation": {}
    },
    {
        "label": "get_user_model",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "get_user_model",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "authenticate",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "login",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "ValidationError",
        "importPath": "rest_framework.validators",
        "description": "rest_framework.validators",
        "isExtraImport": true,
        "detail": "rest_framework.validators",
        "documentation": {}
    },
    {
        "label": "send_mail",
        "importPath": "django.core.mail",
        "description": "django.core.mail",
        "isExtraImport": true,
        "detail": "django.core.mail",
        "documentation": {}
    },
    {
        "label": "pandas",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pandas",
        "description": "pandas",
        "detail": "pandas",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "rest_framework.response",
        "description": "rest_framework.response",
        "isExtraImport": true,
        "detail": "rest_framework.response",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "rest_framework.response",
        "description": "rest_framework.response",
        "isExtraImport": true,
        "detail": "rest_framework.response",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "rest_framework.response",
        "description": "rest_framework.response",
        "isExtraImport": true,
        "detail": "rest_framework.response",
        "documentation": {}
    },
    {
        "label": "cache",
        "importPath": "django.core.cache",
        "description": "django.core.cache",
        "isExtraImport": true,
        "detail": "django.core.cache",
        "documentation": {}
    },
    {
        "label": "cache",
        "importPath": "django.core.cache",
        "description": "django.core.cache",
        "isExtraImport": true,
        "detail": "django.core.cache",
        "documentation": {}
    },
    {
        "label": "APIView",
        "importPath": "rest_framework.views",
        "description": "rest_framework.views",
        "isExtraImport": true,
        "detail": "rest_framework.views",
        "documentation": {}
    },
    {
        "label": "APIView",
        "importPath": "rest_framework.views",
        "description": "rest_framework.views",
        "isExtraImport": true,
        "detail": "rest_framework.views",
        "documentation": {}
    },
    {
        "label": "APIView",
        "importPath": "rest_framework.views",
        "description": "rest_framework.views",
        "isExtraImport": true,
        "detail": "rest_framework.views",
        "documentation": {}
    },
    {
        "label": "AllowAny",
        "importPath": "rest_framework.permissions",
        "description": "rest_framework.permissions",
        "isExtraImport": true,
        "detail": "rest_framework.permissions",
        "documentation": {}
    },
    {
        "label": "AllowAny",
        "importPath": "rest_framework.permissions",
        "description": "rest_framework.permissions",
        "isExtraImport": true,
        "detail": "rest_framework.permissions",
        "documentation": {}
    },
    {
        "label": "argparse",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "argparse",
        "description": "argparse",
        "detail": "argparse",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Sequence",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Tuple",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Sequence",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Tuple",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "ckeditor.fields",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "ckeditor.fields",
        "description": "ckeditor.fields",
        "detail": "ckeditor.fields",
        "documentation": {}
    },
    {
        "label": "RichTextField",
        "importPath": "ckeditor.fields",
        "description": "ckeditor.fields",
        "isExtraImport": true,
        "detail": "ckeditor.fields",
        "documentation": {}
    },
    {
        "label": "django.contrib.auth.models",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "AbstractUser",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "django.contrib.auth.validators",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "django.contrib.auth.validators",
        "description": "django.contrib.auth.validators",
        "detail": "django.contrib.auth.validators",
        "documentation": {}
    },
    {
        "label": "django.core.validators",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "django.core.validators",
        "description": "django.core.validators",
        "detail": "django.core.validators",
        "documentation": {}
    },
    {
        "label": "FileExtensionValidator",
        "importPath": "django.core.validators",
        "description": "django.core.validators",
        "isExtraImport": true,
        "detail": "django.core.validators",
        "documentation": {}
    },
    {
        "label": "django.utils.timezone",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "django.utils.timezone",
        "description": "django.utils.timezone",
        "detail": "django.utils.timezone",
        "documentation": {}
    },
    {
        "label": "format_html",
        "importPath": "django.utils.html",
        "description": "django.utils.html",
        "isExtraImport": true,
        "detail": "django.utils.html",
        "documentation": {}
    },
    {
        "label": "UserAdmin",
        "importPath": "django.contrib.auth.admin",
        "description": "django.contrib.auth.admin",
        "isExtraImport": true,
        "detail": "django.contrib.auth.admin",
        "documentation": {}
    },
    {
        "label": "UserCreationForm",
        "importPath": "django.contrib.auth.forms",
        "description": "django.contrib.auth.forms",
        "isExtraImport": true,
        "detail": "django.contrib.auth.forms",
        "documentation": {}
    },
    {
        "label": "UserChangeForm",
        "importPath": "django.contrib.auth.forms",
        "description": "django.contrib.auth.forms",
        "isExtraImport": true,
        "detail": "django.contrib.auth.forms",
        "documentation": {}
    },
    {
        "label": "PageNumberPagination",
        "importPath": "rest_framework.pagination",
        "description": "rest_framework.pagination",
        "isExtraImport": true,
        "detail": "rest_framework.pagination",
        "documentation": {}
    },
    {
        "label": "hmac,",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "hmac.",
        "description": "hmac.",
        "detail": "hmac.",
        "documentation": {}
    },
    {
        "label": "Count",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Count",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Avg",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Q",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Count",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "F",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Avg",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Sum",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Count",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Max",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Min",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Q",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "TruncDate",
        "importPath": "django.db.models.functions",
        "description": "django.db.models.functions",
        "isExtraImport": true,
        "detail": "django.db.models.functions",
        "documentation": {}
    },
    {
        "label": "RowNumber",
        "importPath": "django.db.models.functions",
        "description": "django.db.models.functions",
        "isExtraImport": true,
        "detail": "django.db.models.functions",
        "documentation": {}
    },
    {
        "label": "TruncDate",
        "importPath": "django.db.models.functions",
        "description": "django.db.models.functions",
        "isExtraImport": true,
        "detail": "django.db.models.functions",
        "documentation": {}
    },
    {
        "label": "TokenObtainPairSerializer",
        "importPath": "rest_framework_simplejwt.serializers",
        "description": "rest_framework_simplejwt.serializers",
        "isExtraImport": true,
        "detail": "rest_framework_simplejwt.serializers",
        "documentation": {}
    },
    {
        "label": "post_save",
        "importPath": "django.db.models.signals",
        "description": "django.db.models.signals",
        "isExtraImport": true,
        "detail": "django.db.models.signals",
        "documentation": {}
    },
    {
        "label": "post_delete",
        "importPath": "django.db.models.signals",
        "description": "django.db.models.signals",
        "isExtraImport": true,
        "detail": "django.db.models.signals",
        "documentation": {}
    },
    {
        "label": "post_save",
        "importPath": "django.db.models.signals",
        "description": "django.db.models.signals",
        "isExtraImport": true,
        "detail": "django.db.models.signals",
        "documentation": {}
    },
    {
        "label": "receiver",
        "importPath": "django.dispatch",
        "description": "django.dispatch",
        "isExtraImport": true,
        "detail": "django.dispatch",
        "documentation": {}
    },
    {
        "label": "receiver",
        "importPath": "django.dispatch",
        "description": "django.dispatch",
        "isExtraImport": true,
        "detail": "django.dispatch",
        "documentation": {}
    },
    {
        "label": "TokenObtainPairView",
        "importPath": "rest_framework_simplejwt.views",
        "description": "rest_framework_simplejwt.views",
        "isExtraImport": true,
        "detail": "rest_framework_simplejwt.views",
        "documentation": {}
    },
    {
        "label": "TokenRefreshView",
        "importPath": "rest_framework_simplejwt.views",
        "description": "rest_framework_simplejwt.views",
        "isExtraImport": true,
        "detail": "rest_framework_simplejwt.views",
        "documentation": {}
    },
    {
        "label": "TokenObtainPairView",
        "importPath": "rest_framework_simplejwt.views",
        "description": "rest_framework_simplejwt.views",
        "isExtraImport": true,
        "detail": "rest_framework_simplejwt.views",
        "documentation": {}
    },
    {
        "label": "Window",
        "importPath": "django.db.models.expressions",
        "description": "django.db.models.expressions",
        "isExtraImport": true,
        "detail": "django.db.models.expressions",
        "documentation": {}
    },
    {
        "label": "OrderBy",
        "importPath": "django.db.models.expressions",
        "description": "django.db.models.expressions",
        "isExtraImport": true,
        "detail": "django.db.models.expressions",
        "documentation": {}
    },
    {
        "label": "ListAPIView",
        "importPath": "rest_framework.generics",
        "description": "rest_framework.generics",
        "isExtraImport": true,
        "detail": "rest_framework.generics",
        "documentation": {}
    },
    {
        "label": "CreateAPIView",
        "importPath": "rest_framework.generics",
        "description": "rest_framework.generics",
        "isExtraImport": true,
        "detail": "rest_framework.generics",
        "documentation": {}
    },
    {
        "label": "ListAPIView",
        "importPath": "rest_framework.generics",
        "description": "rest_framework.generics",
        "isExtraImport": true,
        "detail": "rest_framework.generics",
        "documentation": {}
    },
    {
        "label": "RefreshToken",
        "importPath": "rest_framework_simplejwt.tokens",
        "description": "rest_framework_simplejwt.tokens",
        "isExtraImport": true,
        "detail": "rest_framework_simplejwt.tokens",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "django.utils",
        "description": "django.utils",
        "isExtraImport": true,
        "detail": "django.utils",
        "documentation": {}
    },
    {
        "label": "get_object_or_404",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "random,",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "random.",
        "description": "random.",
        "detail": "random.",
        "documentation": {}
    },
    {
        "label": "DeviceToken",
        "importPath": "notifications.models",
        "description": "notifications.models",
        "isExtraImport": true,
        "detail": "notifications.models",
        "documentation": {}
    },
    {
        "label": "send_push_fcm",
        "importPath": "utils.push_fcm",
        "description": "utils.push_fcm",
        "isExtraImport": true,
        "detail": "utils.push_fcm",
        "documentation": {}
    },
    {
        "label": "TemplateView",
        "importPath": "django.views.generic",
        "description": "django.views.generic",
        "isExtraImport": true,
        "detail": "django.views.generic",
        "documentation": {}
    },
    {
        "label": "method_decorator",
        "importPath": "django.utils.decorators",
        "description": "django.utils.decorators",
        "isExtraImport": true,
        "detail": "django.utils.decorators",
        "documentation": {}
    },
    {
        "label": "cache_page",
        "importPath": "django.views.decorators.cache",
        "description": "django.views.decorators.cache",
        "isExtraImport": true,
        "detail": "django.views.decorators.cache",
        "documentation": {}
    },
    {
        "label": "firebase_admin",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "firebase_admin",
        "description": "firebase_admin",
        "detail": "firebase_admin",
        "documentation": {}
    },
    {
        "label": "credentials",
        "importPath": "firebase_admin",
        "description": "firebase_admin",
        "isExtraImport": true,
        "detail": "firebase_admin",
        "documentation": {}
    },
    {
        "label": "messaging",
        "importPath": "firebase_admin",
        "description": "firebase_admin",
        "isExtraImport": true,
        "detail": "firebase_admin",
        "documentation": {}
    },
    {
        "label": "ec",
        "importPath": "cryptography.hazmat.primitives.asymmetric",
        "description": "cryptography.hazmat.primitives.asymmetric",
        "isExtraImport": true,
        "detail": "cryptography.hazmat.primitives.asymmetric",
        "documentation": {}
    },
    {
        "label": "serialization",
        "importPath": "cryptography.hazmat.primitives",
        "description": "cryptography.hazmat.primitives",
        "isExtraImport": true,
        "detail": "cryptography.hazmat.primitives",
        "documentation": {}
    },
    {
        "label": "base64",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "base64",
        "description": "base64",
        "detail": "base64",
        "documentation": {}
    },
    {
        "label": "application",
        "kind": 5,
        "importPath": "config.asgi",
        "description": "config.asgi",
        "peekOfCode": "application = get_asgi_application()",
        "detail": "config.asgi",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "config.celery",
        "description": "config.celery",
        "peekOfCode": "app = Celery(\"config\")\napp.config_from_object(\"django.conf:settings\", namespace=\"CELERY\")\n# Bu joyda INSTALLED_APPS ichidan tasklarni qidiradi\napp.autodiscover_tasks(lambda: settings.INSTALLED_APPS)",
        "detail": "config.celery",
        "documentation": {}
    },
    {
        "label": "BASE_DIR",
        "kind": 5,
        "importPath": "config.settings",
        "description": "config.settings",
        "peekOfCode": "BASE_DIR = Path(__file__).resolve().parent.parent\n# Quick-start development settings - unsuitable for production\n# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = 'django-insecure-ge#zoy!4dh2+tosxq6myd1e7d8!&n4f*90kj+hw1+_fs!k&msv'\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\nALLOWED_HOSTS = ['*']\n# Application definition\nINSTALLED_APPS = [",
        "detail": "config.settings",
        "documentation": {}
    },
    {
        "label": "SECRET_KEY",
        "kind": 5,
        "importPath": "config.settings",
        "description": "config.settings",
        "peekOfCode": "SECRET_KEY = 'django-insecure-ge#zoy!4dh2+tosxq6myd1e7d8!&n4f*90kj+hw1+_fs!k&msv'\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\nALLOWED_HOSTS = ['*']\n# Application definition\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',",
        "detail": "config.settings",
        "documentation": {}
    },
    {
        "label": "DEBUG",
        "kind": 5,
        "importPath": "config.settings",
        "description": "config.settings",
        "peekOfCode": "DEBUG = True\nALLOWED_HOSTS = ['*']\n# Application definition\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',",
        "detail": "config.settings",
        "documentation": {}
    },
    {
        "label": "ALLOWED_HOSTS",
        "kind": 5,
        "importPath": "config.settings",
        "description": "config.settings",
        "peekOfCode": "ALLOWED_HOSTS = ['*']\n# Application definition\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'corsheaders',",
        "detail": "config.settings",
        "documentation": {}
    },
    {
        "label": "INSTALLED_APPS",
        "kind": 5,
        "importPath": "config.settings",
        "description": "config.settings",
        "peekOfCode": "INSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'corsheaders',\n    'rest_framework',\n    'rest_framework.authtoken',",
        "detail": "config.settings",
        "documentation": {}
    },
    {
        "label": "REST_FRAMEWORK",
        "kind": 5,
        "importPath": "config.settings",
        "description": "config.settings",
        "peekOfCode": "REST_FRAMEWORK = {\n    \"DEFAULT_AUTHENTICATION_CLASSES\": [\n        \"rest_framework_simplejwt.authentication.JWTAuthentication\",\n    ],\n    \"DEFAULT_PERMISSION_CLASSES\": [\n        \"rest_framework.permissions.IsAuthenticated\",\n    ],\n    \"DEFAULT_PAGINATION_CLASS\": \"rest_framework.pagination.PageNumberPagination\",\n    \"PAGE_SIZE\": 10,\n    \"DEFAULT_FILTER_BACKENDS\": [",
        "detail": "config.settings",
        "documentation": {}
    },
    {
        "label": "CACHES",
        "kind": 5,
        "importPath": "config.settings",
        "description": "config.settings",
        "peekOfCode": "CACHES = {\n    \"default\": {\n        \"BACKEND\": \"django_redis.cache.RedisCache\",\n        \"LOCATION\": \"redis://redis:6379/1\",\n        \"OPTIONS\": {\n            \"CLIENT_CLASS\": \"django_redis.client.DefaultClient\",\n        }\n    }\n}\nMIDDLEWARE = [",
        "detail": "config.settings",
        "documentation": {}
    },
    {
        "label": "MIDDLEWARE",
        "kind": 5,
        "importPath": "config.settings",
        "description": "config.settings",
        "peekOfCode": "MIDDLEWARE = [\n    'corsheaders.middleware.CorsMiddleware',\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]",
        "detail": "config.settings",
        "documentation": {}
    },
    {
        "label": "ROOT_URLCONF",
        "kind": 5,
        "importPath": "config.settings",
        "description": "config.settings",
        "peekOfCode": "ROOT_URLCONF = 'config.urls'\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [ BASE_DIR / 'templates' ],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',",
        "detail": "config.settings",
        "documentation": {}
    },
    {
        "label": "TEMPLATES",
        "kind": 5,
        "importPath": "config.settings",
        "description": "config.settings",
        "peekOfCode": "TEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [ BASE_DIR / 'templates' ],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',",
        "detail": "config.settings",
        "documentation": {}
    },
    {
        "label": "WSGI_APPLICATION",
        "kind": 5,
        "importPath": "config.settings",
        "description": "config.settings",
        "peekOfCode": "WSGI_APPLICATION = 'config.wsgi.application'\nCSRF_TRUSTED_ORIGINS = [\n    \"https://*.ngrok-free.app\",   # istalgan ngrok subdomain\n    \"http://82.27.177.165\",       # server IP\n    \"http://localhost:8000\",      # local dev\n    \"http://127.0.0.1:8000\",       # local dev\n    \"http://127.0.0.1:5173\",\n    \"http://localhost:5173/\",\n    \"http://test-platform.surge.sh\",\n    \"https://test-platform.surge.sh/\"",
        "detail": "config.settings",
        "documentation": {}
    },
    {
        "label": "CSRF_TRUSTED_ORIGINS",
        "kind": 5,
        "importPath": "config.settings",
        "description": "config.settings",
        "peekOfCode": "CSRF_TRUSTED_ORIGINS = [\n    \"https://*.ngrok-free.app\",   # istalgan ngrok subdomain\n    \"http://82.27.177.165\",       # server IP\n    \"http://localhost:8000\",      # local dev\n    \"http://127.0.0.1:8000\",       # local dev\n    \"http://127.0.0.1:5173\",\n    \"http://localhost:5173/\",\n    \"http://test-platform.surge.sh\",\n    \"https://test-platform.surge.sh/\"\n    \"http://192.168.1.133:5173/\"",
        "detail": "config.settings",
        "documentation": {}
    },
    {
        "label": "DATABASES",
        "kind": 5,
        "importPath": "config.settings",
        "description": "config.settings",
        "peekOfCode": "DATABASES = {\n    \"default\": {\n        \"ENGINE\": \"django.db.backends.postgresql\",\n        \"NAME\": \"quizdb\",\n        \"USER\": \"quizuser\",\n        \"PASSWORD\": \"sodiq2005.py\",\n        \"HOST\": \"db\",\n        \"PORT\": 5432,\n    }\n}",
        "detail": "config.settings",
        "documentation": {}
    },
    {
        "label": "AUTH_PASSWORD_VALIDATORS",
        "kind": 5,
        "importPath": "config.settings",
        "description": "config.settings",
        "peekOfCode": "AUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    }\n]\n# Internationalization\n# https://docs.djangoproject.com/en/5.2/topics/i18n/\nLANGUAGE_CODE = 'uz'\nTIME_ZONE = 'Asia/Tashkent'\nUSE_I18N = True",
        "detail": "config.settings",
        "documentation": {}
    },
    {
        "label": "LANGUAGE_CODE",
        "kind": 5,
        "importPath": "config.settings",
        "description": "config.settings",
        "peekOfCode": "LANGUAGE_CODE = 'uz'\nTIME_ZONE = 'Asia/Tashkent'\nUSE_I18N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/5.2/howto/static-files/\nSTATIC_URL = 'static/'\nSTATICFILES_DIRS = [ BASE_DIR / 'static' ]\nSTATIC_ROOT = BASE_DIR / 'staticfiles'\nMEDIA_URL = 'media/'",
        "detail": "config.settings",
        "documentation": {}
    },
    {
        "label": "TIME_ZONE",
        "kind": 5,
        "importPath": "config.settings",
        "description": "config.settings",
        "peekOfCode": "TIME_ZONE = 'Asia/Tashkent'\nUSE_I18N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/5.2/howto/static-files/\nSTATIC_URL = 'static/'\nSTATICFILES_DIRS = [ BASE_DIR / 'static' ]\nSTATIC_ROOT = BASE_DIR / 'staticfiles'\nMEDIA_URL = 'media/'\nMEDIA_FILES_DIRS = BASE_DIR / 'media'",
        "detail": "config.settings",
        "documentation": {}
    },
    {
        "label": "USE_I18N",
        "kind": 5,
        "importPath": "config.settings",
        "description": "config.settings",
        "peekOfCode": "USE_I18N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/5.2/howto/static-files/\nSTATIC_URL = 'static/'\nSTATICFILES_DIRS = [ BASE_DIR / 'static' ]\nSTATIC_ROOT = BASE_DIR / 'staticfiles'\nMEDIA_URL = 'media/'\nMEDIA_FILES_DIRS = BASE_DIR / 'media'\n# Default primary key field type",
        "detail": "config.settings",
        "documentation": {}
    },
    {
        "label": "USE_TZ",
        "kind": 5,
        "importPath": "config.settings",
        "description": "config.settings",
        "peekOfCode": "USE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/5.2/howto/static-files/\nSTATIC_URL = 'static/'\nSTATICFILES_DIRS = [ BASE_DIR / 'static' ]\nSTATIC_ROOT = BASE_DIR / 'staticfiles'\nMEDIA_URL = 'media/'\nMEDIA_FILES_DIRS = BASE_DIR / 'media'\n# Default primary key field type\n# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field",
        "detail": "config.settings",
        "documentation": {}
    },
    {
        "label": "STATIC_URL",
        "kind": 5,
        "importPath": "config.settings",
        "description": "config.settings",
        "peekOfCode": "STATIC_URL = 'static/'\nSTATICFILES_DIRS = [ BASE_DIR / 'static' ]\nSTATIC_ROOT = BASE_DIR / 'staticfiles'\nMEDIA_URL = 'media/'\nMEDIA_FILES_DIRS = BASE_DIR / 'media'\n# Default primary key field type\n# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\nAUTH_USER_MODEL = 'mainApp.User'\nCORS_ALLOW_CREDENTIALS = True",
        "detail": "config.settings",
        "documentation": {}
    },
    {
        "label": "STATICFILES_DIRS",
        "kind": 5,
        "importPath": "config.settings",
        "description": "config.settings",
        "peekOfCode": "STATICFILES_DIRS = [ BASE_DIR / 'static' ]\nSTATIC_ROOT = BASE_DIR / 'staticfiles'\nMEDIA_URL = 'media/'\nMEDIA_FILES_DIRS = BASE_DIR / 'media'\n# Default primary key field type\n# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\nAUTH_USER_MODEL = 'mainApp.User'\nCORS_ALLOW_CREDENTIALS = True\nCORS_ALLOW_ALL_ORIGINS = True",
        "detail": "config.settings",
        "documentation": {}
    },
    {
        "label": "STATIC_ROOT",
        "kind": 5,
        "importPath": "config.settings",
        "description": "config.settings",
        "peekOfCode": "STATIC_ROOT = BASE_DIR / 'staticfiles'\nMEDIA_URL = 'media/'\nMEDIA_FILES_DIRS = BASE_DIR / 'media'\n# Default primary key field type\n# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\nAUTH_USER_MODEL = 'mainApp.User'\nCORS_ALLOW_CREDENTIALS = True\nCORS_ALLOW_ALL_ORIGINS = True\n# CORS_ALLOWED_ORIGINS = [",
        "detail": "config.settings",
        "documentation": {}
    },
    {
        "label": "MEDIA_URL",
        "kind": 5,
        "importPath": "config.settings",
        "description": "config.settings",
        "peekOfCode": "MEDIA_URL = 'media/'\nMEDIA_FILES_DIRS = BASE_DIR / 'media'\n# Default primary key field type\n# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\nAUTH_USER_MODEL = 'mainApp.User'\nCORS_ALLOW_CREDENTIALS = True\nCORS_ALLOW_ALL_ORIGINS = True\n# CORS_ALLOWED_ORIGINS = [\n#     \"http://localhost:3000\",",
        "detail": "config.settings",
        "documentation": {}
    },
    {
        "label": "MEDIA_FILES_DIRS",
        "kind": 5,
        "importPath": "config.settings",
        "description": "config.settings",
        "peekOfCode": "MEDIA_FILES_DIRS = BASE_DIR / 'media'\n# Default primary key field type\n# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\nAUTH_USER_MODEL = 'mainApp.User'\nCORS_ALLOW_CREDENTIALS = True\nCORS_ALLOW_ALL_ORIGINS = True\n# CORS_ALLOWED_ORIGINS = [\n#     \"http://localhost:3000\",\n#     \"http://127.0.0.1:3000\",",
        "detail": "config.settings",
        "documentation": {}
    },
    {
        "label": "DEFAULT_AUTO_FIELD",
        "kind": 5,
        "importPath": "config.settings",
        "description": "config.settings",
        "peekOfCode": "DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\nAUTH_USER_MODEL = 'mainApp.User'\nCORS_ALLOW_CREDENTIALS = True\nCORS_ALLOW_ALL_ORIGINS = True\n# CORS_ALLOWED_ORIGINS = [\n#     \"http://localhost:3000\",\n#     \"http://127.0.0.1:3000\",\n#     \"https://myfrontend.com\",\n#     \"http://localhost:5173\",\n#     \"http://192.168.1.132:5173\",",
        "detail": "config.settings",
        "documentation": {}
    },
    {
        "label": "AUTH_USER_MODEL",
        "kind": 5,
        "importPath": "config.settings",
        "description": "config.settings",
        "peekOfCode": "AUTH_USER_MODEL = 'mainApp.User'\nCORS_ALLOW_CREDENTIALS = True\nCORS_ALLOW_ALL_ORIGINS = True\n# CORS_ALLOWED_ORIGINS = [\n#     \"http://localhost:3000\",\n#     \"http://127.0.0.1:3000\",\n#     \"https://myfrontend.com\",\n#     \"http://localhost:5173\",\n#     \"http://192.168.1.132:5173\",\n#     \"http://test-platform.surge.sh\",",
        "detail": "config.settings",
        "documentation": {}
    },
    {
        "label": "CORS_ALLOW_CREDENTIALS",
        "kind": 5,
        "importPath": "config.settings",
        "description": "config.settings",
        "peekOfCode": "CORS_ALLOW_CREDENTIALS = True\nCORS_ALLOW_ALL_ORIGINS = True\n# CORS_ALLOWED_ORIGINS = [\n#     \"http://localhost:3000\",\n#     \"http://127.0.0.1:3000\",\n#     \"https://myfrontend.com\",\n#     \"http://localhost:5173\",\n#     \"http://192.168.1.132:5173\",\n#     \"http://test-platform.surge.sh\",\n#     \"https://test-platform.surge.sh\"",
        "detail": "config.settings",
        "documentation": {}
    },
    {
        "label": "CORS_ALLOW_ALL_ORIGINS",
        "kind": 5,
        "importPath": "config.settings",
        "description": "config.settings",
        "peekOfCode": "CORS_ALLOW_ALL_ORIGINS = True\n# CORS_ALLOWED_ORIGINS = [\n#     \"http://localhost:3000\",\n#     \"http://127.0.0.1:3000\",\n#     \"https://myfrontend.com\",\n#     \"http://localhost:5173\",\n#     \"http://192.168.1.132:5173\",\n#     \"http://test-platform.surge.sh\",\n#     \"https://test-platform.surge.sh\"\n#     \"http://192.168.1.133:5173\"",
        "detail": "config.settings",
        "documentation": {}
    },
    {
        "label": "CKEDITOR_UPLOAD_PATH",
        "kind": 5,
        "importPath": "config.settings",
        "description": "config.settings",
        "peekOfCode": "CKEDITOR_UPLOAD_PATH = \"uploads/\"\nSIMPLE_JWT = {\n    \"ACCESS_TOKEN_LIFETIME\": timedelta(days=1),  # Access tokenni 1 kunga qisqartirish\n    \"REFRESH_TOKEN_LIFETIME\": timedelta(days=30),  # Refresh tokenni 30 kun\n    \"ROTATE_REFRESH_TOKENS\": True,  # Xavfsizlik uchun refresh tokenni aylantirish\n    \"BLACKLIST_AFTER_ROTATION\": True,  # Eski refresh tokenlarni qora ro‘yxatga qo‘shish\n    \"ALGORITHM\": \"HS256\",\n    \"SIGNING_KEY\": SECRET_KEY,\n    \"AUTH_HEADER_TYPES\": (\"Bearer\",),\n    \"USER_ID_FIELD\": \"id\",",
        "detail": "config.settings",
        "documentation": {}
    },
    {
        "label": "SIMPLE_JWT",
        "kind": 5,
        "importPath": "config.settings",
        "description": "config.settings",
        "peekOfCode": "SIMPLE_JWT = {\n    \"ACCESS_TOKEN_LIFETIME\": timedelta(days=1),  # Access tokenni 1 kunga qisqartirish\n    \"REFRESH_TOKEN_LIFETIME\": timedelta(days=30),  # Refresh tokenni 30 kun\n    \"ROTATE_REFRESH_TOKENS\": True,  # Xavfsizlik uchun refresh tokenni aylantirish\n    \"BLACKLIST_AFTER_ROTATION\": True,  # Eski refresh tokenlarni qora ro‘yxatga qo‘shish\n    \"ALGORITHM\": \"HS256\",\n    \"SIGNING_KEY\": SECRET_KEY,\n    \"AUTH_HEADER_TYPES\": (\"Bearer\",),\n    \"USER_ID_FIELD\": \"id\",\n    \"USER_ID_CLAIM\": \"user_id\",",
        "detail": "config.settings",
        "documentation": {}
    },
    {
        "label": "SWAGGER_SETTINGS",
        "kind": 5,
        "importPath": "config.settings",
        "description": "config.settings",
        "peekOfCode": "SWAGGER_SETTINGS = {\n    'SECURITY_DEFINITIONS': {\n        'Bearer': {\n            'type': 'apiKey',\n            'name': 'Authorization',\n            'in': 'header',\n            'description': 'JWT format: Bearer <token>'\n        }\n    }\n}",
        "detail": "config.settings",
        "documentation": {}
    },
    {
        "label": "EMAIL_BACKEND",
        "kind": 5,
        "importPath": "config.settings",
        "description": "config.settings",
        "peekOfCode": "EMAIL_BACKEND = \"django.core.mail.backends.smtp.EmailBackend\"\nEMAIL_HOST = \"smtp.gmail.com\"\nEMAIL_PORT = 587\nEMAIL_USE_TLS = True\nEMAIL_HOST_USER = \"sodiqdevpython@gmail.com\"\nEMAIL_HOST_PASSWORD = \"lttckvmvqzsqbbga\"\nCELERY_BROKER_URL = \"redis://redis:6379/0\"\nCELERY_RESULT_BACKEND = \"redis://redis:6379/0\"",
        "detail": "config.settings",
        "documentation": {}
    },
    {
        "label": "EMAIL_HOST",
        "kind": 5,
        "importPath": "config.settings",
        "description": "config.settings",
        "peekOfCode": "EMAIL_HOST = \"smtp.gmail.com\"\nEMAIL_PORT = 587\nEMAIL_USE_TLS = True\nEMAIL_HOST_USER = \"sodiqdevpython@gmail.com\"\nEMAIL_HOST_PASSWORD = \"lttckvmvqzsqbbga\"\nCELERY_BROKER_URL = \"redis://redis:6379/0\"\nCELERY_RESULT_BACKEND = \"redis://redis:6379/0\"",
        "detail": "config.settings",
        "documentation": {}
    },
    {
        "label": "EMAIL_PORT",
        "kind": 5,
        "importPath": "config.settings",
        "description": "config.settings",
        "peekOfCode": "EMAIL_PORT = 587\nEMAIL_USE_TLS = True\nEMAIL_HOST_USER = \"sodiqdevpython@gmail.com\"\nEMAIL_HOST_PASSWORD = \"lttckvmvqzsqbbga\"\nCELERY_BROKER_URL = \"redis://redis:6379/0\"\nCELERY_RESULT_BACKEND = \"redis://redis:6379/0\"",
        "detail": "config.settings",
        "documentation": {}
    },
    {
        "label": "EMAIL_USE_TLS",
        "kind": 5,
        "importPath": "config.settings",
        "description": "config.settings",
        "peekOfCode": "EMAIL_USE_TLS = True\nEMAIL_HOST_USER = \"sodiqdevpython@gmail.com\"\nEMAIL_HOST_PASSWORD = \"lttckvmvqzsqbbga\"\nCELERY_BROKER_URL = \"redis://redis:6379/0\"\nCELERY_RESULT_BACKEND = \"redis://redis:6379/0\"",
        "detail": "config.settings",
        "documentation": {}
    },
    {
        "label": "EMAIL_HOST_USER",
        "kind": 5,
        "importPath": "config.settings",
        "description": "config.settings",
        "peekOfCode": "EMAIL_HOST_USER = \"sodiqdevpython@gmail.com\"\nEMAIL_HOST_PASSWORD = \"lttckvmvqzsqbbga\"\nCELERY_BROKER_URL = \"redis://redis:6379/0\"\nCELERY_RESULT_BACKEND = \"redis://redis:6379/0\"",
        "detail": "config.settings",
        "documentation": {}
    },
    {
        "label": "EMAIL_HOST_PASSWORD",
        "kind": 5,
        "importPath": "config.settings",
        "description": "config.settings",
        "peekOfCode": "EMAIL_HOST_PASSWORD = \"lttckvmvqzsqbbga\"\nCELERY_BROKER_URL = \"redis://redis:6379/0\"\nCELERY_RESULT_BACKEND = \"redis://redis:6379/0\"",
        "detail": "config.settings",
        "documentation": {}
    },
    {
        "label": "CELERY_BROKER_URL",
        "kind": 5,
        "importPath": "config.settings",
        "description": "config.settings",
        "peekOfCode": "CELERY_BROKER_URL = \"redis://redis:6379/0\"\nCELERY_RESULT_BACKEND = \"redis://redis:6379/0\"",
        "detail": "config.settings",
        "documentation": {}
    },
    {
        "label": "CELERY_RESULT_BACKEND",
        "kind": 5,
        "importPath": "config.settings",
        "description": "config.settings",
        "peekOfCode": "CELERY_RESULT_BACKEND = \"redis://redis:6379/0\"",
        "detail": "config.settings",
        "documentation": {}
    },
    {
        "label": "service_worker",
        "kind": 2,
        "importPath": "config.urls",
        "description": "config.urls",
        "peekOfCode": "def service_worker(request):\n    sw_path = Path(settings.BASE_DIR) / \"static\" / \"firebase-messaging-sw.js\"\n    content = sw_path.read_text(encoding=\"utf-8\")\n    return HttpResponse(content, content_type=\"application/javascript\")\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path(\"firebase-messaging-sw.js\", service_worker),\n\tpath('', include('mainApp.urls')),\n    path('', include('notifications.urls')),\n    path('statistics/', include('statistic.urls')),",
        "detail": "config.urls",
        "documentation": {}
    },
    {
        "label": "schema_view",
        "kind": 5,
        "importPath": "config.urls",
        "description": "config.urls",
        "peekOfCode": "schema_view = get_schema_view(\n   openapi.Info(\n      title=\"Test\",\n      default_version='v1',\n      description=\"Test description\",\n      terms_of_service=\"sodiqdev.netlify.app\",\n      contact=openapi.Contact(email=\"sodiqdevpython@gmail.com\"),\n      license=openapi.License(name=\"BSD License\"),\n   ),\n   public=True,",
        "detail": "config.urls",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "config.urls",
        "description": "config.urls",
        "peekOfCode": "urlpatterns = [\n    path('admin/', admin.site.urls),\n    path(\"firebase-messaging-sw.js\", service_worker),\n\tpath('', include('mainApp.urls')),\n    path('', include('notifications.urls')),\n    path('statistics/', include('statistic.urls')),\n    path('auth/', include('customAuth.urls')),\n    path(\"ckeditor/\", include(\"ckeditor_uploader.urls\")),\n\tpath('swagger<format>/', schema_view.without_ui(cache_timeout=0), name='schema-json'),\n    path('swagger/', schema_view.with_ui('swagger', cache_timeout=0), name='schema-swagger-ui'),",
        "detail": "config.urls",
        "documentation": {}
    },
    {
        "label": "application",
        "kind": 5,
        "importPath": "config.wsgi",
        "description": "config.wsgi",
        "peekOfCode": "application = get_wsgi_application()",
        "detail": "config.wsgi",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "customAuth.migrations.0001_initial",
        "description": "customAuth.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n        ('mainApp', '0001_initial'),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='StudentImport',\n            fields=[\n                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),",
        "detail": "customAuth.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "StudentImportAdmin",
        "kind": 6,
        "importPath": "customAuth.admin",
        "description": "customAuth.admin",
        "peekOfCode": "class StudentImportAdmin(admin.ModelAdmin):\n    list_display = (\"group\", \"file\", \"created\",)\n    readonly_fields = (\"created\",)\n    def save_model(self, request, obj, form, change):\n        super().save_model(request, obj, form, change)\n        process_student_import.delay(obj.id)\n        self.message_user(request, \"Fayl yuklandi, userlar orqa fonda yaratilmoqda ✅\")",
        "detail": "customAuth.admin",
        "documentation": {}
    },
    {
        "label": "CustomauthConfig",
        "kind": 6,
        "importPath": "customAuth.apps",
        "description": "customAuth.apps",
        "peekOfCode": "class CustomauthConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'customAuth'",
        "detail": "customAuth.apps",
        "documentation": {}
    },
    {
        "label": "StudentImport",
        "kind": 6,
        "importPath": "customAuth.models",
        "description": "customAuth.models",
        "peekOfCode": "class StudentImport(BaseModel):\n    group = models.ForeignKey(Group, on_delete=models.CASCADE, verbose_name=\"Guruh\")\n    file = models.FileField(upload_to=\"imports/\", verbose_name=\"Excel fayl\")\n    def __str__(self):\n        return f\"Import - {self.group.name} ({self.created:%Y-%m-%d %H:%M})\"",
        "detail": "customAuth.models",
        "documentation": {}
    },
    {
        "label": "RegisterSerializer",
        "kind": 6,
        "importPath": "customAuth.serializers",
        "description": "customAuth.serializers",
        "peekOfCode": "class RegisterSerializer(serializers.ModelSerializer):\n    password = serializers.CharField(write_only=True)\n    group_id = serializers.PrimaryKeyRelatedField(\n        queryset=Group.objects.all(), source=\"group\", write_only=True\n    )\n    class Meta:\n        model = User\n        fields = [\"username\", \"password\", \"first_name\", \"last_name\", \"group_id\", \"profile_photo\", \"email\"]\n    def create(self, validated_data):\n        password = validated_data.pop(\"password\")",
        "detail": "customAuth.serializers",
        "documentation": {}
    },
    {
        "label": "ChangePasswordSerializer",
        "kind": 6,
        "importPath": "customAuth.serializers",
        "description": "customAuth.serializers",
        "peekOfCode": "class ChangePasswordSerializer(serializers.Serializer):\n    old_password = serializers.CharField(required=True)\n    new_password = serializers.CharField(required=True)\n    def validate_old_password(self, value):\n        user = self.context[\"request\"].user\n        if not user.check_password(value):\n            raise serializers.ValidationError(\"Eski parol noto‘g‘ri.\")\n        return value\n    def save(self, **kwargs):\n        user = self.context[\"request\"].user",
        "detail": "customAuth.serializers",
        "documentation": {}
    },
    {
        "label": "UpdateEmailSerializer",
        "kind": 6,
        "importPath": "customAuth.serializers",
        "description": "customAuth.serializers",
        "peekOfCode": "class UpdateEmailSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = User\n        fields = [\"email\"]\n    def validate_email(self, value):\n        if User.objects.filter(email=value).exclude(pk=self.instance.pk).exists():\n            raise serializers.ValidationError(\"Bu email allaqachon ishlatilmoqda.\")\n        return value\nclass ForgotPasswordSerializer(serializers.Serializer):\n    email = serializers.EmailField()",
        "detail": "customAuth.serializers",
        "documentation": {}
    },
    {
        "label": "ForgotPasswordSerializer",
        "kind": 6,
        "importPath": "customAuth.serializers",
        "description": "customAuth.serializers",
        "peekOfCode": "class ForgotPasswordSerializer(serializers.Serializer):\n    email = serializers.EmailField()\n    def validate_email(self, value):\n        if not User.objects.filter(email=value).exists():\n            raise serializers.ValidationError(\"Bunday email mavjud emas\")\n        return value\nclass ResetPasswordSerializer(serializers.Serializer):\n    token = serializers.CharField()\n    new_password = serializers.CharField()",
        "detail": "customAuth.serializers",
        "documentation": {}
    },
    {
        "label": "ResetPasswordSerializer",
        "kind": 6,
        "importPath": "customAuth.serializers",
        "description": "customAuth.serializers",
        "peekOfCode": "class ResetPasswordSerializer(serializers.Serializer):\n    token = serializers.CharField()\n    new_password = serializers.CharField()",
        "detail": "customAuth.serializers",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 5,
        "importPath": "customAuth.serializers",
        "description": "customAuth.serializers",
        "peekOfCode": "User = get_user_model()\nclass RegisterSerializer(serializers.ModelSerializer):\n    password = serializers.CharField(write_only=True)\n    group_id = serializers.PrimaryKeyRelatedField(\n        queryset=Group.objects.all(), source=\"group\", write_only=True\n    )\n    class Meta:\n        model = User\n        fields = [\"username\", \"password\", \"first_name\", \"last_name\", \"group_id\", \"profile_photo\", \"email\"]\n    def create(self, validated_data):",
        "detail": "customAuth.serializers",
        "documentation": {}
    },
    {
        "label": "send_reset_email",
        "kind": 2,
        "importPath": "customAuth.tasks",
        "description": "customAuth.tasks",
        "peekOfCode": "def send_reset_email(email, token):\n    reset_link = f\"http://192.168.1.133:5173/reset-password/{token}\"\n    subject = \"Parolni tiklash\"\n    message = (\n        f\"\\n\\nParolingizni tiklash uchun quyidagi linkdan foydalaning:\\n\"\n        f\"{reset_link}\\n\\nAgar parolingizni almashtirmoqchi bo'lmasangiz e'tiborsiz qoldiring.\\n bu link 10 daqiqa davomida yaroqli bo'la oladi !\"\n    )\n    send_mail(\n        subject,\n        message,",
        "detail": "customAuth.tasks",
        "documentation": {}
    },
    {
        "label": "process_student_import",
        "kind": 2,
        "importPath": "customAuth.tasks",
        "description": "customAuth.tasks",
        "peekOfCode": "def process_student_import(import_id):\n    try:\n        student_import = StudentImport.objects.get(id=import_id)\n    except StudentImport.DoesNotExist:\n        return \"Import topilmadi\"\n    df = pd.read_excel(student_import.file.path)\n    count = 0\n    for _, row in df.iterrows():\n        talaba_id = str(row[\"Talaba ID\"]).strip()\n        passport = str(row[\"Pasport raqami\"]).strip()",
        "detail": "customAuth.tasks",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "customAuth.urls",
        "description": "customAuth.urls",
        "peekOfCode": "urlpatterns = [\n    path(\"register/\", RegisterView.as_view(), name=\"register\"),\n    path(\"change-password/\", ChangePasswordView.as_view(), name=\"change_password\"),\n    path(\"update-email/\", UpdateEmailView.as_view(), name=\"update_email\"),\n    path(\"forgot-password/\", ForgotPasswordView.as_view(), name=\"forgot_password\"),\n    path(\"reset-password/\", ResetPasswordView.as_view(), name=\"reset_password\"),\n]",
        "detail": "customAuth.urls",
        "documentation": {}
    },
    {
        "label": "RegisterView",
        "kind": 6,
        "importPath": "customAuth.views",
        "description": "customAuth.views",
        "peekOfCode": "class RegisterView(generics.CreateAPIView):\n    permission_classes = [AllowAny]\n    queryset = User.objects.all()\n    serializer_class = RegisterSerializer\nclass ChangePasswordView(generics.UpdateAPIView):\n    serializer_class = ChangePasswordSerializer\n    permission_classes = [permissions.IsAuthenticated]\n    def get_object(self):\n        return self.request.user\n    def update(self, request, *args, **kwargs):",
        "detail": "customAuth.views",
        "documentation": {}
    },
    {
        "label": "ChangePasswordView",
        "kind": 6,
        "importPath": "customAuth.views",
        "description": "customAuth.views",
        "peekOfCode": "class ChangePasswordView(generics.UpdateAPIView):\n    serializer_class = ChangePasswordSerializer\n    permission_classes = [permissions.IsAuthenticated]\n    def get_object(self):\n        return self.request.user\n    def update(self, request, *args, **kwargs):\n        serializer = self.get_serializer(data=request.data, context={\"request\": request})\n        serializer.is_valid(raise_exception=True)\n        serializer.save()\n        return Response({\"detail\": \"Parol muvaffaqiyatli o'zgartirildi.\"}, status=status.HTTP_200_OK)",
        "detail": "customAuth.views",
        "documentation": {}
    },
    {
        "label": "UpdateEmailView",
        "kind": 6,
        "importPath": "customAuth.views",
        "description": "customAuth.views",
        "peekOfCode": "class UpdateEmailView(generics.UpdateAPIView):\n    serializer_class = UpdateEmailSerializer\n    permission_classes = [permissions.IsAuthenticated]\n    def get_object(self):\n        return self.request.user\nclass ForgotPasswordView(APIView):\n    permission_classes = [permissions.AllowAny]\n    def post(self, request):\n        serializer = ForgotPasswordSerializer(data=request.data)\n        serializer.is_valid(raise_exception=True)",
        "detail": "customAuth.views",
        "documentation": {}
    },
    {
        "label": "ForgotPasswordView",
        "kind": 6,
        "importPath": "customAuth.views",
        "description": "customAuth.views",
        "peekOfCode": "class ForgotPasswordView(APIView):\n    permission_classes = [permissions.AllowAny]\n    def post(self, request):\n        serializer = ForgotPasswordSerializer(data=request.data)\n        serializer.is_valid(raise_exception=True)\n        email = serializer.validated_data[\"email\"]\n        try:\n            user = User.objects.get(email=email)\n        except User.DoesNotExist:\n            return Response({\"detail\": \"Bunday email topilmadi.\"}, status=status.HTTP_400_BAD_REQUEST)",
        "detail": "customAuth.views",
        "documentation": {}
    },
    {
        "label": "ResetPasswordView",
        "kind": 6,
        "importPath": "customAuth.views",
        "description": "customAuth.views",
        "peekOfCode": "class ResetPasswordView(APIView):\n    permission_classes = [permissions.AllowAny]\n    def post(self, request):\n        serializer = ResetPasswordSerializer(data=request.data)\n        serializer.is_valid(raise_exception=True)\n        token = serializer.validated_data[\"token\"]\n        new_password = serializer.validated_data[\"new_password\"]\n        user_id = cache.get(token)\n        if not user_id:\n            return Response({\"detail\": \"Token noto‘g‘ri yoki muddati o‘tgan.\"}, status=status.HTTP_400_BAD_REQUEST)",
        "detail": "customAuth.views",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 5,
        "importPath": "customAuth.views",
        "description": "customAuth.views",
        "peekOfCode": "User = get_user_model()\nclass RegisterView(generics.CreateAPIView):\n    permission_classes = [AllowAny]\n    queryset = User.objects.all()\n    serializer_class = RegisterSerializer\nclass ChangePasswordView(generics.UpdateAPIView):\n    serializer_class = ChangePasswordSerializer\n    permission_classes = [permissions.IsAuthenticated]\n    def get_object(self):\n        return self.request.user",
        "detail": "customAuth.views",
        "documentation": {}
    },
    {
        "label": "firestore_adminCallTransformer",
        "kind": 6,
        "importPath": "env.Scripts.fixup_firestore_admin_v1_keywords",
        "description": "env.Scripts.fixup_firestore_admin_v1_keywords",
        "peekOfCode": "class firestore_adminCallTransformer(cst.CSTTransformer):\n    CTRL_PARAMS: Tuple[str] = ('retry', 'timeout', 'metadata')\n    METHOD_TO_PARAMS: Dict[str, Tuple[str]] = {\n        'bulk_delete_documents': ('name', 'collection_ids', 'namespace_ids', ),\n        'create_backup_schedule': ('parent', 'backup_schedule', ),\n        'create_database': ('parent', 'database', 'database_id', ),\n        'create_index': ('parent', 'index', ),\n        'create_user_creds': ('parent', 'user_creds', 'user_creds_id', ),\n        'delete_backup': ('name', ),\n        'delete_backup_schedule': ('name', ),",
        "detail": "env.Scripts.fixup_firestore_admin_v1_keywords",
        "documentation": {}
    },
    {
        "label": "partition",
        "kind": 2,
        "importPath": "env.Scripts.fixup_firestore_admin_v1_keywords",
        "description": "env.Scripts.fixup_firestore_admin_v1_keywords",
        "peekOfCode": "def partition(\n    predicate: Callable[[Any], bool],\n    iterator: Sequence[Any]\n) -> Tuple[List[Any], List[Any]]:\n    \"\"\"A stable, out-of-place partition.\"\"\"\n    results = ([], [])\n    for i in iterator:\n        results[int(predicate(i))].append(i)\n    # Returns trueList, falseList\n    return results[1], results[0]",
        "detail": "env.Scripts.fixup_firestore_admin_v1_keywords",
        "documentation": {}
    },
    {
        "label": "fix_files",
        "kind": 2,
        "importPath": "env.Scripts.fixup_firestore_admin_v1_keywords",
        "description": "env.Scripts.fixup_firestore_admin_v1_keywords",
        "peekOfCode": "def fix_files(\n    in_dir: pathlib.Path,\n    out_dir: pathlib.Path,\n    *,\n    transformer=firestore_adminCallTransformer(),\n):\n    \"\"\"Duplicate the input dir to the output dir, fixing file method calls.\n    Preconditions:\n    * in_dir is a real directory\n    * out_dir is a real, empty directory",
        "detail": "env.Scripts.fixup_firestore_admin_v1_keywords",
        "documentation": {}
    },
    {
        "label": "firestoreCallTransformer",
        "kind": 6,
        "importPath": "env.Scripts.fixup_firestore_v1_keywords",
        "description": "env.Scripts.fixup_firestore_v1_keywords",
        "peekOfCode": "class firestoreCallTransformer(cst.CSTTransformer):\n    CTRL_PARAMS: Tuple[str] = ('retry', 'timeout', 'metadata')\n    METHOD_TO_PARAMS: Dict[str, Tuple[str]] = {\n        'batch_get_documents': ('database', 'documents', 'mask', 'transaction', 'new_transaction', 'read_time', ),\n        'batch_write': ('database', 'writes', 'labels', ),\n        'begin_transaction': ('database', 'options', ),\n        'commit': ('database', 'writes', 'transaction', ),\n        'create_document': ('parent', 'collection_id', 'document', 'document_id', 'mask', ),\n        'delete_document': ('name', 'current_document', ),\n        'get_document': ('name', 'mask', 'transaction', 'read_time', ),",
        "detail": "env.Scripts.fixup_firestore_v1_keywords",
        "documentation": {}
    },
    {
        "label": "partition",
        "kind": 2,
        "importPath": "env.Scripts.fixup_firestore_v1_keywords",
        "description": "env.Scripts.fixup_firestore_v1_keywords",
        "peekOfCode": "def partition(\n    predicate: Callable[[Any], bool],\n    iterator: Sequence[Any]\n) -> Tuple[List[Any], List[Any]]:\n    \"\"\"A stable, out-of-place partition.\"\"\"\n    results = ([], [])\n    for i in iterator:\n        results[int(predicate(i))].append(i)\n    # Returns trueList, falseList\n    return results[1], results[0]",
        "detail": "env.Scripts.fixup_firestore_v1_keywords",
        "documentation": {}
    },
    {
        "label": "fix_files",
        "kind": 2,
        "importPath": "env.Scripts.fixup_firestore_v1_keywords",
        "description": "env.Scripts.fixup_firestore_v1_keywords",
        "peekOfCode": "def fix_files(\n    in_dir: pathlib.Path,\n    out_dir: pathlib.Path,\n    *,\n    transformer=firestoreCallTransformer(),\n):\n    \"\"\"Duplicate the input dir to the output dir, fixing file method calls.\n    Preconditions:\n    * in_dir is a real directory\n    * out_dir is a real, empty directory",
        "detail": "env.Scripts.fixup_firestore_v1_keywords",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "mainApp.migrations.0001_initial",
        "description": "mainApp.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n        ('auth', '0012_alter_user_first_name_max_length'),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='Group',\n            fields=[\n                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),",
        "detail": "mainApp.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "GroupAdmin",
        "kind": 6,
        "importPath": "mainApp.admin",
        "description": "mainApp.admin",
        "peekOfCode": "class GroupAdmin(admin.ModelAdmin):\n    list_display = ['name', 'kurs', 'created']\n    list_filter = ['kurs', 'created']\n    search_fields = ['name']\nclass CustomUserCreationForm(UserCreationForm):\n    class Meta(UserCreationForm.Meta):\n        model = User\n        fields = (\"username\", \"role\", \"group\", \"first_name\", \"last_name\", \"profile_photo\")\nclass CustomUserChangeForm(UserChangeForm):\n    class Meta(UserChangeForm.Meta):",
        "detail": "mainApp.admin",
        "documentation": {}
    },
    {
        "label": "CustomUserCreationForm",
        "kind": 6,
        "importPath": "mainApp.admin",
        "description": "mainApp.admin",
        "peekOfCode": "class CustomUserCreationForm(UserCreationForm):\n    class Meta(UserCreationForm.Meta):\n        model = User\n        fields = (\"username\", \"role\", \"group\", \"first_name\", \"last_name\", \"profile_photo\")\nclass CustomUserChangeForm(UserChangeForm):\n    class Meta(UserChangeForm.Meta):\n        model = User\n        fields = (\"username\",\"first_name\",\"last_name\",\"role\", \"group\", \"is_active\", \"profile_photo\")\n@admin.register(User)\nclass UserAdmin(BaseUserAdmin):",
        "detail": "mainApp.admin",
        "documentation": {}
    },
    {
        "label": "CustomUserChangeForm",
        "kind": 6,
        "importPath": "mainApp.admin",
        "description": "mainApp.admin",
        "peekOfCode": "class CustomUserChangeForm(UserChangeForm):\n    class Meta(UserChangeForm.Meta):\n        model = User\n        fields = (\"username\",\"first_name\",\"last_name\",\"role\", \"group\", \"is_active\", \"profile_photo\")\n@admin.register(User)\nclass UserAdmin(BaseUserAdmin):\n    add_form = CustomUserCreationForm\n    form = CustomUserChangeForm\n    model = User\n    list_display = (\"username\", \"first_name\", \"last_name\", \"role\")",
        "detail": "mainApp.admin",
        "documentation": {}
    },
    {
        "label": "UserAdmin",
        "kind": 6,
        "importPath": "mainApp.admin",
        "description": "mainApp.admin",
        "peekOfCode": "class UserAdmin(BaseUserAdmin):\n    add_form = CustomUserCreationForm\n    form = CustomUserChangeForm\n    model = User\n    list_display = (\"username\", \"first_name\", \"last_name\", \"role\")\n    list_filter = (\"role\", \"group\", \"date_joined\")\n    search_fields = (\"username\", \"first_name\", \"last_name\", \"email\")\n    ordering = (\"date_joined\",)\n    fieldsets = (\n        (None, {\"fields\": (\"username\", \"password\")}),",
        "detail": "mainApp.admin",
        "documentation": {}
    },
    {
        "label": "CategoryAdmin",
        "kind": 6,
        "importPath": "mainApp.admin",
        "description": "mainApp.admin",
        "peekOfCode": "class CategoryAdmin(admin.ModelAdmin):\n    list_display = ['name', 'subjects_count', 'created']\n    search_fields = ['name']\n    def subjects_count(self, obj):\n        return obj.subjects.count()\n    subjects_count.short_description = 'Fanlar soni'\n# -----------------------\n# 2) Subject va Theme\n# -----------------------\nclass ThemeInline(admin.TabularInline):",
        "detail": "mainApp.admin",
        "documentation": {}
    },
    {
        "label": "ThemeInline",
        "kind": 6,
        "importPath": "mainApp.admin",
        "description": "mainApp.admin",
        "peekOfCode": "class ThemeInline(admin.TabularInline):\n    model = Theme\n    extra = 0\n    fields = ['name', 'duration', 'created']\n    readonly_fields = ['created']\n@admin.register(Subject)\nclass SubjectAdmin(admin.ModelAdmin):\n    list_display = ['name', 'category', 'theme_count', 'authors_list', 'created']\n    list_filter = ['category', 'created']\n    search_fields = ['name', 'category__name']",
        "detail": "mainApp.admin",
        "documentation": {}
    },
    {
        "label": "SubjectAdmin",
        "kind": 6,
        "importPath": "mainApp.admin",
        "description": "mainApp.admin",
        "peekOfCode": "class SubjectAdmin(admin.ModelAdmin):\n    list_display = ['name', 'category', 'theme_count', 'authors_list', 'created']\n    list_filter = ['category', 'created']\n    search_fields = ['name', 'category__name']\n    filter_horizontal = ['authors', 'groups']\n    inlines = [ThemeInline]\n    def authors_list(self, obj):\n        return \", \".join([author.username for author in obj.authors.all()[:3]])\n    authors_list.short_description = 'Mualliflar'\n# -----------------------",
        "detail": "mainApp.admin",
        "documentation": {}
    },
    {
        "label": "TestImportFileInline",
        "kind": 6,
        "importPath": "mainApp.admin",
        "description": "mainApp.admin",
        "peekOfCode": "class TestImportFileInline(admin.TabularInline):\n    model = TestImportFile\n    extra = 1\n    fields = ['file', 'created']\n    readonly_fields = ['created']\nclass TestInline(admin.TabularInline):\n    model = Test\n    extra = 0\n    fields = ['name', 'question_count', 'default_duration', 'created']\n    readonly_fields = ['question_count', 'created']",
        "detail": "mainApp.admin",
        "documentation": {}
    },
    {
        "label": "TestInline",
        "kind": 6,
        "importPath": "mainApp.admin",
        "description": "mainApp.admin",
        "peekOfCode": "class TestInline(admin.TabularInline):\n    model = Test\n    extra = 0\n    fields = ['name', 'question_count', 'default_duration', 'created']\n    readonly_fields = ['question_count', 'created']\n@admin.register(Theme)\nclass ThemeAdmin(admin.ModelAdmin):\n    list_display = ['name', 'subject', 'duration', 'tests_count', 'created']\n    list_filter = ['subject', 'duration', 'created']\n    search_fields = ['name', 'subject__name']",
        "detail": "mainApp.admin",
        "documentation": {}
    },
    {
        "label": "ThemeAdmin",
        "kind": 6,
        "importPath": "mainApp.admin",
        "description": "mainApp.admin",
        "peekOfCode": "class ThemeAdmin(admin.ModelAdmin):\n    list_display = ['name', 'subject', 'duration', 'tests_count', 'created']\n    list_filter = ['subject', 'duration', 'created']\n    search_fields = ['name', 'subject__name']\n    inlines = [TestImportFileInline, TestInline]\n    def tests_count(self, obj):\n        return obj.tests.count()\n    tests_count.short_description = 'Testlar soni'\n@admin.register(TestImportFile)\nclass TestImportFileAdmin(admin.ModelAdmin):",
        "detail": "mainApp.admin",
        "documentation": {}
    },
    {
        "label": "TestImportFileAdmin",
        "kind": 6,
        "importPath": "mainApp.admin",
        "description": "mainApp.admin",
        "peekOfCode": "class TestImportFileAdmin(admin.ModelAdmin):\n    list_display = ['theme', 'file', 'created']\n    list_filter = ['created', 'theme__subject']\n    search_fields = ['theme__name', 'file']\n# -----------------------\n# 4) Test, Question, Option\n# -----------------------\nclass OptionInline(admin.TabularInline):\n    model = Option\n    extra = 4",
        "detail": "mainApp.admin",
        "documentation": {}
    },
    {
        "label": "OptionInline",
        "kind": 6,
        "importPath": "mainApp.admin",
        "description": "mainApp.admin",
        "peekOfCode": "class OptionInline(admin.TabularInline):\n    model = Option\n    extra = 4\n    max_num = 4\n    fields = ['text', 'image', 'is_correct']\nclass QuestionInline(admin.TabularInline):\n    model = Question\n    extra = 0\n    fields = ['text', 'image']\n    readonly_fields = ['text', 'image']",
        "detail": "mainApp.admin",
        "documentation": {}
    },
    {
        "label": "QuestionInline",
        "kind": 6,
        "importPath": "mainApp.admin",
        "description": "mainApp.admin",
        "peekOfCode": "class QuestionInline(admin.TabularInline):\n    model = Question\n    extra = 0\n    fields = ['text', 'image']\n    readonly_fields = ['text', 'image']\n@admin.register(Test)\nclass TestAdmin(admin.ModelAdmin):\n    list_display = ['name', 'theme', 'question_count', 'default_duration', 'attempts_count', 'created']\n    list_filter = ['theme__subject', 'default_duration', 'created']\n    search_fields = ['name', 'theme__name']",
        "detail": "mainApp.admin",
        "documentation": {}
    },
    {
        "label": "TestAdmin",
        "kind": 6,
        "importPath": "mainApp.admin",
        "description": "mainApp.admin",
        "peekOfCode": "class TestAdmin(admin.ModelAdmin):\n    list_display = ['name', 'theme', 'question_count', 'default_duration', 'attempts_count', 'created']\n    list_filter = ['theme__subject', 'default_duration', 'created']\n    search_fields = ['name', 'theme__name']\n    inlines = [QuestionInline]\n    def attempts_count(self, obj):\n        return obj.attempts.count()\n    attempts_count.short_description = 'Urinishlar soni'\n@admin.register(Question)\nclass QuestionAdmin(admin.ModelAdmin):",
        "detail": "mainApp.admin",
        "documentation": {}
    },
    {
        "label": "QuestionAdmin",
        "kind": 6,
        "importPath": "mainApp.admin",
        "description": "mainApp.admin",
        "peekOfCode": "class QuestionAdmin(admin.ModelAdmin):\n    list_display = ['id', 'test', 'text_preview', 'has_image', 'options_count', 'created']\n    list_filter = ['test', 'created']\n    search_fields = ['text', 'test__name']\n    inlines = [OptionInline]\n    def text_preview(self, obj):\n        if obj.text:\n            return obj.text[:50] + '...' if len(obj.text) > 50 else obj.text\n        return \"Rasm\"\n    text_preview.short_description = 'Savol'",
        "detail": "mainApp.admin",
        "documentation": {}
    },
    {
        "label": "OptionAdmin",
        "kind": 6,
        "importPath": "mainApp.admin",
        "description": "mainApp.admin",
        "peekOfCode": "class OptionAdmin(admin.ModelAdmin):\n    list_display = ['id', 'question', 'text_preview', 'has_image', 'is_correct']\n    list_filter = ['is_correct', 'question__test', 'created']\n    search_fields = ['text', 'question__text']\n    def text_preview(self, obj):\n        if obj.text:\n            return obj.text[:50] + '...' if len(obj.text) > 50 else obj.text\n        return \"Rasm\"\n    text_preview.short_description = 'Variant'\n    def has_image(self, obj):",
        "detail": "mainApp.admin",
        "documentation": {}
    },
    {
        "label": "AnswerInline",
        "kind": 6,
        "importPath": "mainApp.admin",
        "description": "mainApp.admin",
        "peekOfCode": "class AnswerInline(admin.TabularInline):\n    model = Answer\n    extra = 0\n    fields = ['question', 'selected_option', 'is_correct']\n    readonly_fields = ['question', 'selected_option', 'is_correct']\n@admin.register(TestAttempt)\nclass TestAttemptAdmin(admin.ModelAdmin):\n    list_display = ['user', 'test', 'mode', 'score', 'duration', 'started_at', 'finished_at']\n    list_filter = ['mode', 'started_at', 'finished_at', 'test__theme__subject']\n    search_fields = ['user__username', 'test__name']",
        "detail": "mainApp.admin",
        "documentation": {}
    },
    {
        "label": "TestAttemptAdmin",
        "kind": 6,
        "importPath": "mainApp.admin",
        "description": "mainApp.admin",
        "peekOfCode": "class TestAttemptAdmin(admin.ModelAdmin):\n    list_display = ['user', 'test', 'mode', 'score', 'duration', 'started_at', 'finished_at']\n    list_filter = ['mode', 'started_at', 'finished_at', 'test__theme__subject']\n    search_fields = ['user__username', 'test__name']\n    inlines = [AnswerInline]\n    readonly_fields = ['started_at', 'finished_at', 'score', 'duration']\n@admin.register(Answer)\nclass AnswerAdmin(admin.ModelAdmin):\n    list_display = ['attempt_info', 'question_preview', 'selected_option_preview', 'is_correct']\n    list_filter = ['is_correct', 'attempt__test', 'attempt__started_at']",
        "detail": "mainApp.admin",
        "documentation": {}
    },
    {
        "label": "AnswerAdmin",
        "kind": 6,
        "importPath": "mainApp.admin",
        "description": "mainApp.admin",
        "peekOfCode": "class AnswerAdmin(admin.ModelAdmin):\n    list_display = ['attempt_info', 'question_preview', 'selected_option_preview', 'is_correct']\n    list_filter = ['is_correct', 'attempt__test', 'attempt__started_at']\n    search_fields = ['attempt__user__username', 'question__text']\n    def attempt_info(self, obj):\n        return f\"{obj.attempt.user.username} - {obj.attempt.test.name}\"\n    attempt_info.short_description = 'Urinish'\n    def question_preview(self, obj):\n        return obj.question.text[:30] + '...' if obj.question.text and len(obj.question.text) > 30 else obj.question.text or \"Rasm\"\n    question_preview.short_description = 'Savol'",
        "detail": "mainApp.admin",
        "documentation": {}
    },
    {
        "label": "MainappConfig",
        "kind": 6,
        "importPath": "mainApp.apps",
        "description": "mainApp.apps",
        "peekOfCode": "class MainappConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'mainApp'\n    def ready(self):\n        import mainApp.signals\n        print(\">>> notifications.signals LOADED\")",
        "detail": "mainApp.apps",
        "documentation": {}
    },
    {
        "label": "Group",
        "kind": 6,
        "importPath": "mainApp.models",
        "description": "mainApp.models",
        "peekOfCode": "class Group(BaseModel):\n    name = models.CharField(max_length=255, verbose_name=\"Guruh nomi\")\n    kurs = models.PositiveIntegerField(verbose_name=\"Kurs\")\n    def __str__(self):\n        return f\"{self.name} (Kurs {self.kurs})\"\n    class Meta:\n        verbose_name = \"Guruh\"\n        verbose_name_plural = \"Guruhlar\"\nclass User(BaseModel, AbstractUser):\n    email = models.EmailField(null=True, blank=True, verbose_name=\"Email\")",
        "detail": "mainApp.models",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 6,
        "importPath": "mainApp.models",
        "description": "mainApp.models",
        "peekOfCode": "class User(BaseModel, AbstractUser):\n    email = models.EmailField(null=True, blank=True, verbose_name=\"Email\")\n    profile_photo = models.ImageField(upload_to=\"profile_photo\", null=True, blank=True)\n    role = models.CharField(max_length=50, choices=[\n        (\"student\", \"Talaba\"),\n        (\"teacher\", \"O'qituvchi\"),\n        (\"admin\", \"Admin\")\n    ], default=\"student\", verbose_name=\"Rol\")\n    group = models.ForeignKey(Group, on_delete=models.SET_NULL, null=True, blank=True, verbose_name=\"Guruh\")\n    total_attempts = models.PositiveIntegerField(default=0)",
        "detail": "mainApp.models",
        "documentation": {}
    },
    {
        "label": "Category",
        "kind": 6,
        "importPath": "mainApp.models",
        "description": "mainApp.models",
        "peekOfCode": "class Category(BaseModel):\n    name = models.CharField(max_length=255, verbose_name=\"Kategoriya nomi\")\n    def __str__(self):\n        return self.name\n    class Meta:\n        verbose_name = \"Kategoriya\"\n        verbose_name_plural = \"Kategoriyalar\"\n        indexes = [\n            models.Index(fields=[\"name\"]),\n        ]",
        "detail": "mainApp.models",
        "documentation": {}
    },
    {
        "label": "Subject",
        "kind": 6,
        "importPath": "mainApp.models",
        "description": "mainApp.models",
        "peekOfCode": "class Subject(BaseModel):\n    category = models.ForeignKey(Category, on_delete=models.CASCADE, related_name=\"subjects\", verbose_name=\"Kategoriya\")\n    name = models.CharField(max_length=255, verbose_name=\"Fan nomi\")\n    description = models.TextField(verbose_name=\"Umumiy ma'lumot\", null=True, blank=True)\n    authors = models.ManyToManyField('User', blank=True, verbose_name=\"Mualliflar\")\n    theme_count = models.PositiveIntegerField(default=0, verbose_name=\"Mavzular soni\")\n    groups = models.ManyToManyField('Group', blank=True, related_name=\"subjects\", verbose_name=\"Guruhlar\")\n    def __str__(self):\n        return self.name\n    class Meta:",
        "detail": "mainApp.models",
        "documentation": {}
    },
    {
        "label": "Theme",
        "kind": 6,
        "importPath": "mainApp.models",
        "description": "mainApp.models",
        "peekOfCode": "class Theme(BaseModel):\n    subject = models.ForeignKey(Subject, on_delete=models.CASCADE, related_name=\"themes\", verbose_name=\"Fan\")\n    name = models.CharField(max_length=255, verbose_name=\"Mavzu nomi\")\n    duration = models.PositiveIntegerField(default=0, verbose_name=\"Davomiyligi (minut)\")\n    full_html_file = RichTextField(verbose_name=\"To'liq matn (HTML)\", null=True, blank=True)\n    def __str__(self):\n        return self.name\n    class Meta:\n        verbose_name = \"Mavzu\"\n        verbose_name_plural = \"Mavzular\"",
        "detail": "mainApp.models",
        "documentation": {}
    },
    {
        "label": "TestImportFile",
        "kind": 6,
        "importPath": "mainApp.models",
        "description": "mainApp.models",
        "peekOfCode": "class TestImportFile(BaseModel):\n    \"\"\"Theme ga bog'langan test import fayl (Word)\"\"\"\n    theme = models.ForeignKey(Theme, on_delete=models.CASCADE, related_name=\"import_files\", verbose_name=\"Mavzu\")\n    file = models.FileField(\n        upload_to=\"test_imports/\",\n        validators=[FileExtensionValidator(allowed_extensions=['doc', 'docx'])],\n        verbose_name=\"Test fayli\",\n        help_text=\"Doc yoki docx formatdagi faylni yuklang\"\n    )\n    def __str__(self):",
        "detail": "mainApp.models",
        "documentation": {}
    },
    {
        "label": "Test",
        "kind": 6,
        "importPath": "mainApp.models",
        "description": "mainApp.models",
        "peekOfCode": "class Test(BaseModel):\n    theme = models.ForeignKey(Theme, on_delete=models.CASCADE, related_name=\"tests\", verbose_name=\"Mavzu\")\n    name = models.CharField(max_length=255, verbose_name=\"Test nomi\")\n    default_duration = models.PositiveIntegerField(default=30, verbose_name=\"Standart davomiyligi (minut)\")\n    question_count = models.PositiveIntegerField(default=0, verbose_name=\"Savollar soni\")\n    def __str__(self):\n        return f\"{self.name} ({self.theme.name})\"\n    class Meta:\n        verbose_name = \"Test\"\n        verbose_name_plural = \"Testlar\"",
        "detail": "mainApp.models",
        "documentation": {}
    },
    {
        "label": "Question",
        "kind": 6,
        "importPath": "mainApp.models",
        "description": "mainApp.models",
        "peekOfCode": "class Question(BaseModel):\n    test = models.ForeignKey(Test, on_delete=models.CASCADE, related_name=\"questions\", verbose_name=\"Test\")\n    text = models.TextField(blank=True, null=True, verbose_name=\"Savol matni\")\n    image = models.ImageField(upload_to=\"questions/\", blank=True, null=True, verbose_name=\"Savol rasmi\")\n    def __str__(self):\n        preview = self.text[:50] if self.text else \"Rasm\"\n        return f\"Q{self.id} - {preview}\"\n    class Meta:\n        verbose_name = \"Savol\"\n        verbose_name_plural = \"Savollar\"",
        "detail": "mainApp.models",
        "documentation": {}
    },
    {
        "label": "Option",
        "kind": 6,
        "importPath": "mainApp.models",
        "description": "mainApp.models",
        "peekOfCode": "class Option(BaseModel):\n    question = models.ForeignKey(Question, related_name=\"options\", on_delete=models.CASCADE, verbose_name=\"Savol\")\n    text = models.TextField(blank=True, null=True, verbose_name=\"Variant matni\")\n    image = models.ImageField(upload_to=\"options/\", blank=True, null=True, verbose_name=\"Variant rasmi\")\n    is_correct = models.BooleanField(default=False, verbose_name=\"To'g'ri javob\")\n    def __str__(self):\n        preview = self.text[:30] if self.text else \"Rasm\"\n        status = \"To'g'ri\" if self.is_correct else \"Noto'g'ri\"\n        return f\"{preview} ({status})\"\n    class Meta:",
        "detail": "mainApp.models",
        "documentation": {}
    },
    {
        "label": "TestAttempt",
        "kind": 6,
        "importPath": "mainApp.models",
        "description": "mainApp.models",
        "peekOfCode": "class TestAttempt(BaseModel):\n    MODE_CHOICES = [\n        (\"sequential\", \"Ketma-ket rejim\"),\n        (\"all_in_one\", \"Ko'p qismli rejim\"),\n    ]\n    test = models.ForeignKey(Test, on_delete=models.CASCADE, related_name=\"attempts\", verbose_name=\"Test\")\n    user = models.ForeignKey(User, on_delete=models.CASCADE, related_name=\"attempts\", verbose_name=\"Foydalanuvchi\")\n    mode = models.CharField(max_length=20, choices=MODE_CHOICES, default=\"sequential\", verbose_name=\"Rejim\")\n    started_at = models.DateTimeField(auto_now_add=True, verbose_name=\"Boshlangan vaqt\")\n    finished_at = models.DateTimeField(null=True, blank=True, verbose_name=\"Tugallangan vaqt\")",
        "detail": "mainApp.models",
        "documentation": {}
    },
    {
        "label": "Answer",
        "kind": 6,
        "importPath": "mainApp.models",
        "description": "mainApp.models",
        "peekOfCode": "class Answer(BaseModel):\n    attempt = models.ForeignKey(TestAttempt, on_delete=models.CASCADE, related_name=\"answers\", verbose_name=\"Urinish\")\n    question = models.ForeignKey(Question, on_delete=models.CASCADE, verbose_name=\"Savol\")\n    selected_option = models.ForeignKey(Option, on_delete=models.CASCADE, null=True, blank=True, verbose_name=\"Tanlangan variant\")\n    is_correct = models.BooleanField(default=False, verbose_name=\"To'g'ri javob\")\n    def __str__(self):\n        return f\"Javob: {self.attempt.user.username} - Q{self.question.id}\"\n    class Meta:\n        verbose_name = \"Javob\"\n        verbose_name_plural = \"Javoblar\"",
        "detail": "mainApp.models",
        "documentation": {}
    },
    {
        "label": "StandardResultsSetPagination",
        "kind": 6,
        "importPath": "mainApp.pagination",
        "description": "mainApp.pagination",
        "peekOfCode": "class StandardResultsSetPagination(PageNumberPagination):\n    page_size = 20\n    page_size_query_param = 'page_size'\n    max_page_size = 100",
        "detail": "mainApp.pagination",
        "documentation": {}
    },
    {
        "label": "CustomTokenObtainPairSerializer",
        "kind": 6,
        "importPath": "mainApp.serializers",
        "description": "mainApp.serializers",
        "peekOfCode": "class CustomTokenObtainPairSerializer(TokenObtainPairSerializer):\n    @classmethod\n    def get_token(cls, user):\n        token = super().get_token(user)\n        # Token ichiga role qo'shib qo'yish\n        token['role'] = user.role  \n        return token\n    def validate(self, attrs):\n        data = super().validate(attrs)\n        # Javobga ham role qo'shib yuboramiz",
        "detail": "mainApp.serializers",
        "documentation": {}
    },
    {
        "label": "CategorySerializer",
        "kind": 6,
        "importPath": "mainApp.serializers",
        "description": "mainApp.serializers",
        "peekOfCode": "class CategorySerializer(serializers.ModelSerializer):\n    class Meta:\n        model = Category\n        fields = ['id','name']\nclass AuthorInfoSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = User\n        fields = ('first_name', 'last_name', 'profile_photo')\nclass GroupSerializer(serializers.ModelSerializer):\n    class Meta:",
        "detail": "mainApp.serializers",
        "documentation": {}
    },
    {
        "label": "AuthorInfoSerializer",
        "kind": 6,
        "importPath": "mainApp.serializers",
        "description": "mainApp.serializers",
        "peekOfCode": "class AuthorInfoSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = User\n        fields = ('first_name', 'last_name', 'profile_photo')\nclass GroupSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = Group\n        fields = \"__all__\"\nclass UserSerializer(serializers.ModelSerializer):\n    class Meta:",
        "detail": "mainApp.serializers",
        "documentation": {}
    },
    {
        "label": "GroupSerializer",
        "kind": 6,
        "importPath": "mainApp.serializers",
        "description": "mainApp.serializers",
        "peekOfCode": "class GroupSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = Group\n        fields = \"__all__\"\nclass UserSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = User\n        fields = \"__all__\"\nclass SubjectSerializer(serializers.ModelSerializer):\n    category = CategorySerializer()",
        "detail": "mainApp.serializers",
        "documentation": {}
    },
    {
        "label": "UserSerializer",
        "kind": 6,
        "importPath": "mainApp.serializers",
        "description": "mainApp.serializers",
        "peekOfCode": "class UserSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = User\n        fields = \"__all__\"\nclass SubjectSerializer(serializers.ModelSerializer):\n    category = CategorySerializer()\n    authors = AuthorInfoSerializer(many=True, read_only=True)\n    class Meta:\n        model = Subject\n        fields = ['id', 'name', 'category', 'theme_count', 'authors', 'description']",
        "detail": "mainApp.serializers",
        "documentation": {}
    },
    {
        "label": "SubjectSerializer",
        "kind": 6,
        "importPath": "mainApp.serializers",
        "description": "mainApp.serializers",
        "peekOfCode": "class SubjectSerializer(serializers.ModelSerializer):\n    category = CategorySerializer()\n    authors = AuthorInfoSerializer(many=True, read_only=True)\n    class Meta:\n        model = Subject\n        fields = ['id', 'name', 'category', 'theme_count', 'authors', 'description']\nclass SubjectBasicSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = Subject\n        fields = ['id', 'name']",
        "detail": "mainApp.serializers",
        "documentation": {}
    },
    {
        "label": "SubjectBasicSerializer",
        "kind": 6,
        "importPath": "mainApp.serializers",
        "description": "mainApp.serializers",
        "peekOfCode": "class SubjectBasicSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = Subject\n        fields = ['id', 'name']\nclass ThemeListSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = Theme\n        fields = ['id','name', 'duration']\nclass ThemeSerializer(serializers.ModelSerializer):\n    subject = SubjectSerializer()",
        "detail": "mainApp.serializers",
        "documentation": {}
    },
    {
        "label": "ThemeListSerializer",
        "kind": 6,
        "importPath": "mainApp.serializers",
        "description": "mainApp.serializers",
        "peekOfCode": "class ThemeListSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = Theme\n        fields = ['id','name', 'duration']\nclass ThemeSerializer(serializers.ModelSerializer):\n    subject = SubjectSerializer()\n    class Meta:\n        model = Theme\n        fields = \"__all__\"\nclass TestSerializer(serializers.ModelSerializer):",
        "detail": "mainApp.serializers",
        "documentation": {}
    },
    {
        "label": "ThemeSerializer",
        "kind": 6,
        "importPath": "mainApp.serializers",
        "description": "mainApp.serializers",
        "peekOfCode": "class ThemeSerializer(serializers.ModelSerializer):\n    subject = SubjectSerializer()\n    class Meta:\n        model = Theme\n        fields = \"__all__\"\nclass TestSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = Test\n        fields = \"__all__\"\nclass QuestionSerializer(serializers.ModelSerializer):",
        "detail": "mainApp.serializers",
        "documentation": {}
    },
    {
        "label": "TestSerializer",
        "kind": 6,
        "importPath": "mainApp.serializers",
        "description": "mainApp.serializers",
        "peekOfCode": "class TestSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = Test\n        fields = \"__all__\"\nclass QuestionSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = Question\n        fields = \"__all__\"\nclass OptionSerializer(serializers.ModelSerializer):\n    class Meta:",
        "detail": "mainApp.serializers",
        "documentation": {}
    },
    {
        "label": "QuestionSerializer",
        "kind": 6,
        "importPath": "mainApp.serializers",
        "description": "mainApp.serializers",
        "peekOfCode": "class QuestionSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = Question\n        fields = \"__all__\"\nclass OptionSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = Option\n        fields = \"__all__\"\nclass TestAttemptSerializer(serializers.ModelSerializer):\n    class Meta:",
        "detail": "mainApp.serializers",
        "documentation": {}
    },
    {
        "label": "OptionSerializer",
        "kind": 6,
        "importPath": "mainApp.serializers",
        "description": "mainApp.serializers",
        "peekOfCode": "class OptionSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = Option\n        fields = \"__all__\"\nclass TestAttemptSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = TestAttempt\n        fields = \"__all__\"\nclass AnswerSerializer(serializers.ModelSerializer):\n    class Meta:",
        "detail": "mainApp.serializers",
        "documentation": {}
    },
    {
        "label": "TestAttemptSerializer",
        "kind": 6,
        "importPath": "mainApp.serializers",
        "description": "mainApp.serializers",
        "peekOfCode": "class TestAttemptSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = TestAttempt\n        fields = \"__all__\"\nclass AnswerSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = Answer\n        fields = \"__all__\"\nALLOWED_COUNTS = (5, 10, 20, 25, 30, 0)\ndef _abs_url(request, f):",
        "detail": "mainApp.serializers",
        "documentation": {}
    },
    {
        "label": "AnswerSerializer",
        "kind": 6,
        "importPath": "mainApp.serializers",
        "description": "mainApp.serializers",
        "peekOfCode": "class AnswerSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = Answer\n        fields = \"__all__\"\nALLOWED_COUNTS = (5, 10, 20, 25, 30, 0)\ndef _abs_url(request, f):\n    if not f:\n        return None\n    url = f.url\n    return request.build_absolute_uri(url) if request else url",
        "detail": "mainApp.serializers",
        "documentation": {}
    },
    {
        "label": "AttemptStartQuerySerializer",
        "kind": 6,
        "importPath": "mainApp.serializers",
        "description": "mainApp.serializers",
        "peekOfCode": "class AttemptStartQuerySerializer(serializers.Serializer):\n    count = serializers.IntegerField(required=True)\n    order = serializers.ChoiceField(choices=('random', 'sequential'), required=True)\n    mode  = serializers.ChoiceField(choices=('sequential', 'all_in_one'), required=True)\n    duration = serializers.IntegerField(required=False, min_value=1, max_value=240)\n    def validate_count(self, v):\n        if v not in ALLOWED_COUNTS:\n            raise serializers.ValidationError(f\"count {ALLOWED_COUNTS} dan biri bo‘lishi kerak\")\n        return v\n# --------- Start: outward packet",
        "detail": "mainApp.serializers",
        "documentation": {}
    },
    {
        "label": "AttemptOptionOutSerializer",
        "kind": 6,
        "importPath": "mainApp.serializers",
        "description": "mainApp.serializers",
        "peekOfCode": "class AttemptOptionOutSerializer(serializers.ModelSerializer):\n    image_url = serializers.SerializerMethodField()\n    tag_true = serializers.SerializerMethodField()\n    tag_false = serializers.SerializerMethodField()\n    class Meta:\n        model  = Option\n        fields = ('id', 'text', 'image_url', 'tag_true', 'tag_false')\n    def get_image_url(self, obj):\n        return _abs_url(self.context.get('request'), obj.image)\n    def _make_tag(self, obj, correct_flag: int):",
        "detail": "mainApp.serializers",
        "documentation": {}
    },
    {
        "label": "AttemptQuestionOutSerializer",
        "kind": 6,
        "importPath": "mainApp.serializers",
        "description": "mainApp.serializers",
        "peekOfCode": "class AttemptQuestionOutSerializer(serializers.ModelSerializer):\n    image_url = serializers.SerializerMethodField()\n    options   = serializers.SerializerMethodField()\n    correct_token = serializers.SerializerMethodField()\n    class Meta:\n        model = Question\n        fields = ('id', 'text', 'image_url', 'options', 'correct_token')\n    def get_image_url(self, obj):\n        return _abs_url(self.context.get('request'), obj.image)\n    def get_options(self, obj):",
        "detail": "mainApp.serializers",
        "documentation": {}
    },
    {
        "label": "AttemptStartResponseSerializer",
        "kind": 6,
        "importPath": "mainApp.serializers",
        "description": "mainApp.serializers",
        "peekOfCode": "class AttemptStartResponseSerializer(serializers.Serializer):\n    attempt_id = serializers.UUIDField()\n    theme_id   = serializers.UUIDField()\n    test_id    = serializers.UUIDField()\n    count      = serializers.IntegerField()\n    order      = serializers.CharField()\n    mode       = serializers.CharField()\n    duration   = serializers.IntegerField()\n    expires_at = serializers.DateTimeField()\n    questions  = AttemptQuestionOutSerializer(many=True)",
        "detail": "mainApp.serializers",
        "documentation": {}
    },
    {
        "label": "SubmitAnswerWithTagSerializer",
        "kind": 6,
        "importPath": "mainApp.serializers",
        "description": "mainApp.serializers",
        "peekOfCode": "class SubmitAnswerWithTagSerializer(serializers.Serializer):\n    question_id = serializers.UUIDField()\n    option_id   = serializers.UUIDField()\n    verdict     = serializers.BooleanField()\n    tag         = serializers.CharField()\n# --------- State\nclass AttemptStateSerializer(serializers.Serializer):\n    attempt_id   = serializers.UUIDField()\n    started_at   = serializers.DateTimeField()\n    expires_at   = serializers.DateTimeField()",
        "detail": "mainApp.serializers",
        "documentation": {}
    },
    {
        "label": "AttemptStateSerializer",
        "kind": 6,
        "importPath": "mainApp.serializers",
        "description": "mainApp.serializers",
        "peekOfCode": "class AttemptStateSerializer(serializers.Serializer):\n    attempt_id   = serializers.UUIDField()\n    started_at   = serializers.DateTimeField()\n    expires_at   = serializers.DateTimeField()\n    finished_at  = serializers.DateTimeField(allow_null=True)\n    current_idx  = serializers.IntegerField()\n    total        = serializers.IntegerField()\n    answered     = serializers.IntegerField()\n    correct      = serializers.IntegerField()\n    score        = serializers.FloatField(allow_null=True)",
        "detail": "mainApp.serializers",
        "documentation": {}
    },
    {
        "label": "AttemptFinishResponseSerializer",
        "kind": 6,
        "importPath": "mainApp.serializers",
        "description": "mainApp.serializers",
        "peekOfCode": "class AttemptFinishResponseSerializer(serializers.Serializer):\n    attempt_id = serializers.UUIDField()\n    correct    = serializers.IntegerField()\n    total      = serializers.IntegerField()\n    score      = serializers.FloatField()\nclass AttemptResultSerializer(serializers.ModelSerializer):\n    user = serializers.CharField(source=\"user.first_name\")\n    correct = serializers.SerializerMethodField()\n    total = serializers.SerializerMethodField()\n    class Meta:",
        "detail": "mainApp.serializers",
        "documentation": {}
    },
    {
        "label": "AttemptResultSerializer",
        "kind": 6,
        "importPath": "mainApp.serializers",
        "description": "mainApp.serializers",
        "peekOfCode": "class AttemptResultSerializer(serializers.ModelSerializer):\n    user = serializers.CharField(source=\"user.first_name\")\n    correct = serializers.SerializerMethodField()\n    total = serializers.SerializerMethodField()\n    class Meta:\n        model = TestAttempt\n        fields = (\n            \"id\",\n            \"user\",\n            \"started_at\",",
        "detail": "mainApp.serializers",
        "documentation": {}
    },
    {
        "label": "GroupSerializer",
        "kind": 6,
        "importPath": "mainApp.serializers",
        "description": "mainApp.serializers",
        "peekOfCode": "class GroupSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = Group\n        fields = (\"id\", \"name\", \"kurs\")\nclass UserProfileSerializer(serializers.ModelSerializer):\n    group = GroupSerializer()\n    profile_photo_url = serializers.SerializerMethodField()\n    attempts_count = serializers.SerializerMethodField()\n    last_active = serializers.SerializerMethodField()\n    activity = serializers.SerializerMethodField()",
        "detail": "mainApp.serializers",
        "documentation": {}
    },
    {
        "label": "UserProfileSerializer",
        "kind": 6,
        "importPath": "mainApp.serializers",
        "description": "mainApp.serializers",
        "peekOfCode": "class UserProfileSerializer(serializers.ModelSerializer):\n    group = GroupSerializer()\n    profile_photo_url = serializers.SerializerMethodField()\n    attempts_count = serializers.SerializerMethodField()\n    last_active = serializers.SerializerMethodField()\n    activity = serializers.SerializerMethodField()\n    rank_overall = serializers.SerializerMethodField()\n    rank_in_group = serializers.SerializerMethodField()\n    class Meta:\n        model = User",
        "detail": "mainApp.serializers",
        "documentation": {}
    },
    {
        "label": "UserActivityStatSerializer",
        "kind": 6,
        "importPath": "mainApp.serializers",
        "description": "mainApp.serializers",
        "peekOfCode": "class UserActivityStatSerializer(serializers.Serializer):\n    date = serializers.DateField()\n    attempts = serializers.IntegerField()\nclass UserRatingSerializer(serializers.ModelSerializer):\n    group = GroupSerializer()\n    class Meta:\n        model = User\n        fields = (\n            \"id\",\n            \"username\",",
        "detail": "mainApp.serializers",
        "documentation": {}
    },
    {
        "label": "UserRatingSerializer",
        "kind": 6,
        "importPath": "mainApp.serializers",
        "description": "mainApp.serializers",
        "peekOfCode": "class UserRatingSerializer(serializers.ModelSerializer):\n    group = GroupSerializer()\n    class Meta:\n        model = User\n        fields = (\n            \"id\",\n            \"username\",\n            \"first_name\",\n            \"last_name\",\n            \"role\",",
        "detail": "mainApp.serializers",
        "documentation": {}
    },
    {
        "label": "UserStatSerializer",
        "kind": 6,
        "importPath": "mainApp.serializers",
        "description": "mainApp.serializers",
        "peekOfCode": "class UserStatSerializer(serializers.Serializer):\n    user_id = serializers.UUIDField(source=\"user__id\")\n    username = serializers.CharField(source=\"user__username\")\n    attempts = serializers.IntegerField()\n    avg_score = serializers.FloatField()\nclass UserStatSerializer(serializers.Serializer):\n    user_id = serializers.UUIDField(source=\"user__id\")\n    username = serializers.CharField(source=\"user__username\")\n    first_name = serializers.CharField(source=\"user__first_name\", allow_null=True)\n    last_name = serializers.CharField(source=\"user__last_name\", allow_null=True)",
        "detail": "mainApp.serializers",
        "documentation": {}
    },
    {
        "label": "UserStatSerializer",
        "kind": 6,
        "importPath": "mainApp.serializers",
        "description": "mainApp.serializers",
        "peekOfCode": "class UserStatSerializer(serializers.Serializer):\n    user_id = serializers.UUIDField(source=\"user__id\")\n    username = serializers.CharField(source=\"user__username\")\n    first_name = serializers.CharField(source=\"user__first_name\", allow_null=True)\n    last_name = serializers.CharField(source=\"user__last_name\", allow_null=True)\n    email = serializers.EmailField(source=\"user__email\", allow_null=True)\n    attempts = serializers.IntegerField()\n    avg_score = serializers.FloatField()\n    avg_duration = serializers.FloatField()\n    total_correct = serializers.IntegerField()",
        "detail": "mainApp.serializers",
        "documentation": {}
    },
    {
        "label": "ProfilePhotoUpdateSerializer",
        "kind": 6,
        "importPath": "mainApp.serializers",
        "description": "mainApp.serializers",
        "peekOfCode": "class ProfilePhotoUpdateSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = User\n        fields = (\"profile_photo\",)\nclass AttemptResultSerializer(serializers.ModelSerializer):\n    user_id = serializers.UUIDField(source=\"user.id\")\n    username = serializers.CharField(source=\"user.username\")\n    correct = serializers.SerializerMethodField()\n    total = serializers.SerializerMethodField()\n    count = serializers.SerializerMethodField()",
        "detail": "mainApp.serializers",
        "documentation": {}
    },
    {
        "label": "AttemptResultSerializer",
        "kind": 6,
        "importPath": "mainApp.serializers",
        "description": "mainApp.serializers",
        "peekOfCode": "class AttemptResultSerializer(serializers.ModelSerializer):\n    user_id = serializers.UUIDField(source=\"user.id\")\n    username = serializers.CharField(source=\"user.username\")\n    correct = serializers.SerializerMethodField()\n    total = serializers.SerializerMethodField()\n    count = serializers.SerializerMethodField()\n    class Meta:\n        model = TestAttempt\n        fields = (\n            \"id\",",
        "detail": "mainApp.serializers",
        "documentation": {}
    },
    {
        "label": "TopAttemptSerializer",
        "kind": 6,
        "importPath": "mainApp.serializers",
        "description": "mainApp.serializers",
        "peekOfCode": "class TopAttemptSerializer(serializers.ModelSerializer):\n    attempt_id = serializers.UUIDField(source=\"id\")\n    user_id = serializers.UUIDField(source=\"user.id\")\n    username = serializers.CharField(source=\"user.username\")\n    first_name = serializers.CharField(source=\"user.first_name\", allow_null=True)\n    last_name = serializers.CharField(source=\"user.last_name\", allow_null=True)\n    correct = serializers.IntegerField(source=\"correct_count\")\n    wrong = serializers.IntegerField(source=\"wrong_count\")\n    total_questions = serializers.IntegerField()\n    duration = serializers.SerializerMethodField()",
        "detail": "mainApp.serializers",
        "documentation": {}
    },
    {
        "label": "CreateSubjectSerializer",
        "kind": 6,
        "importPath": "mainApp.serializers",
        "description": "mainApp.serializers",
        "peekOfCode": "class CreateSubjectSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = Subject\n        fields = '__all__'\n# Top list\nclass ThemeBasicInfoSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = Theme\n        fields = ['id', 'name']",
        "detail": "mainApp.serializers",
        "documentation": {}
    },
    {
        "label": "ThemeBasicInfoSerializer",
        "kind": 6,
        "importPath": "mainApp.serializers",
        "description": "mainApp.serializers",
        "peekOfCode": "class ThemeBasicInfoSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = Theme\n        fields = ['id', 'name']",
        "detail": "mainApp.serializers",
        "documentation": {}
    },
    {
        "label": "ALLOWED_COUNTS",
        "kind": 5,
        "importPath": "mainApp.serializers",
        "description": "mainApp.serializers",
        "peekOfCode": "ALLOWED_COUNTS = (5, 10, 20, 25, 30, 0)\ndef _abs_url(request, f):\n    if not f:\n        return None\n    url = f.url\n    return request.build_absolute_uri(url) if request else url\n# --------- Start: query params\nclass AttemptStartQuerySerializer(serializers.Serializer):\n    count = serializers.IntegerField(required=True)\n    order = serializers.ChoiceField(choices=('random', 'sequential'), required=True)",
        "detail": "mainApp.serializers",
        "documentation": {}
    },
    {
        "label": "parse_test_file_on_save",
        "kind": 2,
        "importPath": "mainApp.signals",
        "description": "mainApp.signals",
        "peekOfCode": "def parse_test_file_on_save(sender, instance, created, **kwargs):\n    \"\"\"TestImportFile saqlanganda avtomatik parse qilish\"\"\"\n    # Faqat yangi fayl create qilinganda ishlaydi\n    if not created:\n        return\n    # Ikki marta parse qilishni oldini olish\n    file_key = f\"{instance.id}_{instance.file.name}\"\n    if file_key in _currently_parsing:\n        print(f\"Parse jarayonida: {instance.file.name}\")\n        return",
        "detail": "mainApp.signals",
        "documentation": {}
    },
    {
        "label": "update_test_question_count",
        "kind": 2,
        "importPath": "mainApp.signals",
        "description": "mainApp.signals",
        "peekOfCode": "def update_test_question_count(sender, instance, created, **kwargs):\n    \"\"\"Test da savollar soni yangilanganda - faqat manual yaratilganda\"\"\"\n    # Agar parse jarayonida bo'lsa, signal ishlamasin\n    if any(str(instance.test.theme.id) in key for key in _currently_parsing):\n        return\n    test = instance.test\n    test.question_count = test.questions.count()\n    test.save()\n@receiver(post_delete, sender=Question)\ndef update_test_question_count_on_delete(sender, instance, **kwargs):",
        "detail": "mainApp.signals",
        "documentation": {}
    },
    {
        "label": "update_test_question_count_on_delete",
        "kind": 2,
        "importPath": "mainApp.signals",
        "description": "mainApp.signals",
        "peekOfCode": "def update_test_question_count_on_delete(sender, instance, **kwargs):\n    \"\"\"Savol o'chirilganda test dagi sonni yangilash\"\"\"\n    test = instance.test\n    test.question_count = test.questions.count()\n    test.save()\n@receiver(post_save, sender=Theme)\ndef update_subject_theme_count(sender, instance, **kwargs):\n    \"\"\"Subject da mavzular soni yangilash\"\"\"\n    subject = instance.subject\n    subject.theme_count = subject.themes.count()",
        "detail": "mainApp.signals",
        "documentation": {}
    },
    {
        "label": "update_subject_theme_count",
        "kind": 2,
        "importPath": "mainApp.signals",
        "description": "mainApp.signals",
        "peekOfCode": "def update_subject_theme_count(sender, instance, **kwargs):\n    \"\"\"Subject da mavzular soni yangilash\"\"\"\n    subject = instance.subject\n    subject.theme_count = subject.themes.count()\n    subject.save()\n@receiver(post_delete, sender=Theme)\ndef update_subject_theme_count_on_delete(sender, instance, **kwargs):\n    \"\"\"Mavzu o'chirilganda fan dagi sonni yangilash\"\"\"\n    subject = instance.subject\n    subject.theme_count = subject.themes.count()",
        "detail": "mainApp.signals",
        "documentation": {}
    },
    {
        "label": "update_subject_theme_count_on_delete",
        "kind": 2,
        "importPath": "mainApp.signals",
        "description": "mainApp.signals",
        "peekOfCode": "def update_subject_theme_count_on_delete(sender, instance, **kwargs):\n    \"\"\"Mavzu o'chirilganda fan dagi sonni yangilash\"\"\"\n    subject = instance.subject\n    subject.theme_count = subject.themes.count()\n    subject.save()\n@receiver(post_save, sender=TestAttempt)\ndef update_user_stats(sender, instance, created, **kwargs):\n    \"\"\"\n    Har safar TestAttempt tugasa (finished_at != None),\n    foydalanuvchi umumiy statistikasi qayta hisoblanadi.",
        "detail": "mainApp.signals",
        "documentation": {}
    },
    {
        "label": "update_user_stats",
        "kind": 2,
        "importPath": "mainApp.signals",
        "description": "mainApp.signals",
        "peekOfCode": "def update_user_stats(sender, instance, created, **kwargs):\n    \"\"\"\n    Har safar TestAttempt tugasa (finished_at != None),\n    foydalanuvchi umumiy statistikasi qayta hisoblanadi.\n    \"\"\"\n    if instance.finished_at:  # faqat tugallanganda\n        user = instance.user\n        # Barcha attemptlarini olib qayta hisoblash\n        attempts = user.attempts.filter(finished_at__isnull=False)\n        total_attempts = attempts.count()",
        "detail": "mainApp.signals",
        "documentation": {}
    },
    {
        "label": "_currently_parsing",
        "kind": 5,
        "importPath": "mainApp.signals",
        "description": "mainApp.signals",
        "peekOfCode": "_currently_parsing = set()\n@receiver(post_save, sender=TestImportFile)\ndef parse_test_file_on_save(sender, instance, created, **kwargs):\n    \"\"\"TestImportFile saqlanganda avtomatik parse qilish\"\"\"\n    # Faqat yangi fayl create qilinganda ishlaydi\n    if not created:\n        return\n    # Ikki marta parse qilishni oldini olish\n    file_key = f\"{instance.id}_{instance.file.name}\"\n    if file_key in _currently_parsing:",
        "detail": "mainApp.signals",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "mainApp.urls",
        "description": "mainApp.urls",
        "peekOfCode": "urlpatterns = [\n    path(\"login/\", CustomTokenObtainPairView.as_view(), name=\"token_obtain_pair\"),\n    path(\"token/refresh/\", TokenRefreshView.as_view(), name=\"token_refresh\"),\n    path(\"logout/\", LogoutView.as_view(), name=\"token_logout\"),\n    # Group\n    path(\"groups/\", GroupListView.as_view(), name=\"group-list\"),\n    path(\"groups/<uuid:pk>/\", GroupDetailView.as_view(), name=\"group-detail\"),\n    # User\n    path(\"users/\", UserListView.as_view(), name=\"user-list\"),\n    path(\"users/<uuid:pk>/\", UserDetailView.as_view(), name=\"user-detail\"),",
        "detail": "mainApp.urls",
        "documentation": {}
    },
    {
        "label": "CustomTokenObtainPairView",
        "kind": 6,
        "importPath": "mainApp.views",
        "description": "mainApp.views",
        "peekOfCode": "class CustomTokenObtainPairView(TokenObtainPairView):\n    serializer_class = CustomTokenObtainPairSerializer\nclass GroupListView(generics.ListAPIView):\n    permission_classes = [AllowAny]\n    queryset = Group.objects.all()\n    serializer_class = GroupSerializer\n    search_fields = [\"name\", \"kurs\"]\nclass GroupDetailView(generics.RetrieveAPIView):\n    queryset = Group.objects.all()\n    serializer_class = GroupSerializer",
        "detail": "mainApp.views",
        "documentation": {}
    },
    {
        "label": "GroupListView",
        "kind": 6,
        "importPath": "mainApp.views",
        "description": "mainApp.views",
        "peekOfCode": "class GroupListView(generics.ListAPIView):\n    permission_classes = [AllowAny]\n    queryset = Group.objects.all()\n    serializer_class = GroupSerializer\n    search_fields = [\"name\", \"kurs\"]\nclass GroupDetailView(generics.RetrieveAPIView):\n    queryset = Group.objects.all()\n    serializer_class = GroupSerializer\n# 🔹 User\nclass UserListView(generics.ListAPIView):",
        "detail": "mainApp.views",
        "documentation": {}
    },
    {
        "label": "GroupDetailView",
        "kind": 6,
        "importPath": "mainApp.views",
        "description": "mainApp.views",
        "peekOfCode": "class GroupDetailView(generics.RetrieveAPIView):\n    queryset = Group.objects.all()\n    serializer_class = GroupSerializer\n# 🔹 User\nclass UserListView(generics.ListAPIView):\n    queryset = User.objects.all()\n    serializer_class = UserSerializer\n    search_fields = [\"username\", \"first_name\", \"last_name\", \"role\"]\nclass UserDetailView(generics.RetrieveAPIView):\n    queryset = User.objects.all()",
        "detail": "mainApp.views",
        "documentation": {}
    },
    {
        "label": "UserListView",
        "kind": 6,
        "importPath": "mainApp.views",
        "description": "mainApp.views",
        "peekOfCode": "class UserListView(generics.ListAPIView):\n    queryset = User.objects.all()\n    serializer_class = UserSerializer\n    search_fields = [\"username\", \"first_name\", \"last_name\", \"role\"]\nclass UserDetailView(generics.RetrieveAPIView):\n    queryset = User.objects.all()\n    serializer_class = UserSerializer\n# 🔹 Category (faqat list)\nclass CategoryListView(generics.ListAPIView):\n    queryset = Category.objects.all()",
        "detail": "mainApp.views",
        "documentation": {}
    },
    {
        "label": "UserDetailView",
        "kind": 6,
        "importPath": "mainApp.views",
        "description": "mainApp.views",
        "peekOfCode": "class UserDetailView(generics.RetrieveAPIView):\n    queryset = User.objects.all()\n    serializer_class = UserSerializer\n# 🔹 Category (faqat list)\nclass CategoryListView(generics.ListAPIView):\n    queryset = Category.objects.all()\n    serializer_class = CategorySerializer\n    search_fields = [\"name\"]\n# 🔹 Subject\nclass SubjectListView(generics.ListAPIView):",
        "detail": "mainApp.views",
        "documentation": {}
    },
    {
        "label": "CategoryListView",
        "kind": 6,
        "importPath": "mainApp.views",
        "description": "mainApp.views",
        "peekOfCode": "class CategoryListView(generics.ListAPIView):\n    queryset = Category.objects.all()\n    serializer_class = CategorySerializer\n    search_fields = [\"name\"]\n# 🔹 Subject\nclass SubjectListView(generics.ListAPIView):\n    serializer_class = SubjectSerializer\n    search_fields = [\"name\"]\n    permission_classes = [permissions.IsAuthenticated]\n    def get_queryset(self):",
        "detail": "mainApp.views",
        "documentation": {}
    },
    {
        "label": "SubjectListView",
        "kind": 6,
        "importPath": "mainApp.views",
        "description": "mainApp.views",
        "peekOfCode": "class SubjectListView(generics.ListAPIView):\n    serializer_class = SubjectSerializer\n    search_fields = [\"name\"]\n    permission_classes = [permissions.IsAuthenticated]\n    def get_queryset(self):\n        user = self.request.user\n        if user.role == \"admin\":\n            return Subject.objects.all()\n        elif user.role == \"teacher\":\n            return Subject.objects.filter(authors=user)",
        "detail": "mainApp.views",
        "documentation": {}
    },
    {
        "label": "SubjectDetailView",
        "kind": 6,
        "importPath": "mainApp.views",
        "description": "mainApp.views",
        "peekOfCode": "class SubjectDetailView(generics.RetrieveAPIView):\n    queryset = Subject.objects.all()\n    serializer_class = SubjectSerializer\n# 🔹 Theme\nclass ThemeListView(generics.ListAPIView):\n    queryset = Theme.objects.all()\n    serializer_class = ThemeListSerializer\n    search_fields = [\"name\"]\n    filterset_fields = [\"subject__name\"]\nclass ThemeDetailView(generics.RetrieveAPIView):",
        "detail": "mainApp.views",
        "documentation": {}
    },
    {
        "label": "ThemeListView",
        "kind": 6,
        "importPath": "mainApp.views",
        "description": "mainApp.views",
        "peekOfCode": "class ThemeListView(generics.ListAPIView):\n    queryset = Theme.objects.all()\n    serializer_class = ThemeListSerializer\n    search_fields = [\"name\"]\n    filterset_fields = [\"subject__name\"]\nclass ThemeDetailView(generics.RetrieveAPIView):\n    queryset = Theme.objects.all()\n    serializer_class = ThemeSerializer\nclass LogoutView(APIView):\n    permission_classes = [permissions.IsAuthenticated]",
        "detail": "mainApp.views",
        "documentation": {}
    },
    {
        "label": "ThemeDetailView",
        "kind": 6,
        "importPath": "mainApp.views",
        "description": "mainApp.views",
        "peekOfCode": "class ThemeDetailView(generics.RetrieveAPIView):\n    queryset = Theme.objects.all()\n    serializer_class = ThemeSerializer\nclass LogoutView(APIView):\n    permission_classes = [permissions.IsAuthenticated]\n    def post(self, request):\n        try:\n            refresh_token = request.data[\"refresh\"]\n            token = RefreshToken(refresh_token)\n            token.blacklist()  # tokenni blacklist qiladi",
        "detail": "mainApp.views",
        "documentation": {}
    },
    {
        "label": "LogoutView",
        "kind": 6,
        "importPath": "mainApp.views",
        "description": "mainApp.views",
        "peekOfCode": "class LogoutView(APIView):\n    permission_classes = [permissions.IsAuthenticated]\n    def post(self, request):\n        try:\n            refresh_token = request.data[\"refresh\"]\n            token = RefreshToken(refresh_token)\n            token.blacklist()  # tokenni blacklist qiladi\n            return Response({\"detail\": \"Logout qilindi\"}, status=status.HTTP_200_OK)\n        except Exception as e:\n            return Response({\"detail\": \"Refresh token kerak\"}, status=status.HTTP_400_BAD_REQUEST)",
        "detail": "mainApp.views",
        "documentation": {}
    },
    {
        "label": "AttemptStartView",
        "kind": 6,
        "importPath": "mainApp.views",
        "description": "mainApp.views",
        "peekOfCode": "class AttemptStartView(APIView):\n    permission_classes = [permissions.IsAuthenticated]\n    def get(self, request, theme_id):\n        q = AttemptStartQuerySerializer(data=request.query_params)\n        q.is_valid(raise_exception=True)\n        count = q.validated_data[\"count\"]\n        order = q.validated_data[\"order\"]\n        mode  = q.validated_data[\"mode\"]\n        custom_duration = q.validated_data.get(\"duration\")\n        # ✅ Yangi parametr",
        "detail": "mainApp.views",
        "documentation": {}
    },
    {
        "label": "SubmitAnswerView",
        "kind": 6,
        "importPath": "mainApp.views",
        "description": "mainApp.views",
        "peekOfCode": "class SubmitAnswerView(APIView):\n    permission_classes = [permissions.IsAuthenticated]\n    def post(self, request, attempt_id):\n        attempt = get_object_or_404(TestAttempt, id=attempt_id, user=request.user)\n        meta = cache.get(_cache_key(attempt_id))\n        if not meta:\n            return Response({\"detail\": \"Attempt meta topilmadi yoki muddati o‘tgan\"}, status=400)\n        expires_at = datetime.datetime.fromisoformat(meta[\"expires_at\"])\n        if _now() >= expires_at:\n            return self._finish_and_response(attempt)",
        "detail": "mainApp.views",
        "documentation": {}
    },
    {
        "label": "AttemptStateView",
        "kind": 6,
        "importPath": "mainApp.views",
        "description": "mainApp.views",
        "peekOfCode": "class AttemptStateView(APIView):\n    permission_classes = [permissions.IsAuthenticated]\n    def get(self, request, attempt_id):\n        attempt = get_object_or_404(TestAttempt, id=attempt_id, user=request.user)\n        meta = cache.get(_cache_key(attempt_id))\n        if meta:\n            expires_at = datetime.datetime.fromisoformat(meta[\"expires_at\"])\n            if _now() >= expires_at and not attempt.finished_at:\n                # ❗ Tugaganini belgilaymiz\n                attempt.finished_at = _now()",
        "detail": "mainApp.views",
        "documentation": {}
    },
    {
        "label": "AttemptFinishView",
        "kind": 6,
        "importPath": "mainApp.views",
        "description": "mainApp.views",
        "peekOfCode": "class AttemptFinishView(APIView):\n    permission_classes = [permissions.IsAuthenticated]\n    def post(self, request, attempt_id):\n        attempt = get_object_or_404(TestAttempt, id=attempt_id, user=request.user)\n        total = attempt.answers.count()\n        correct = attempt.answers.filter(is_correct=True).count()\n        score = round((correct / total) * 100, 2) if total else 0.0\n        if not attempt.finished_at:\n            attempt.finished_at = _now()\n            attempt.duration = int((attempt.finished_at - attempt.started_at).total_seconds() // 60)",
        "detail": "mainApp.views",
        "documentation": {}
    },
    {
        "label": "TestAttemptResultsView",
        "kind": 6,
        "importPath": "mainApp.views",
        "description": "mainApp.views",
        "peekOfCode": "class TestAttemptResultsView(APIView):\n    def get(self, request, test_id):\n        test = get_object_or_404(Test, id=test_id)\n        attempts = TestAttempt.objects.filter(test=test).select_related(\"user\")\n        mode = request.query_params.get(\"mode\")\n        order = request.query_params.get(\"order\")\n        if mode in (\"sequential\", \"all_in_one\"):\n            attempts = attempts.filter(mode=mode)\n        if order in (\"random\", \"sequential\"):\n            attempts = attempts.filter(order=order)",
        "detail": "mainApp.views",
        "documentation": {}
    },
    {
        "label": "MyProfileView",
        "kind": 6,
        "importPath": "mainApp.views",
        "description": "mainApp.views",
        "peekOfCode": "class MyProfileView(APIView):\n    \"\"\"\n    GET /me/profile\n    \"\"\"\n    permission_classes = [permissions.IsAuthenticated]\n    def get(self, request):\n        ser = UserProfileSerializer(request.user, context={\"request\": request})\n        return Response(ser.data, status=200)\nclass UserProfileView(APIView):\n    \"\"\"",
        "detail": "mainApp.views",
        "documentation": {}
    },
    {
        "label": "UserProfileView",
        "kind": 6,
        "importPath": "mainApp.views",
        "description": "mainApp.views",
        "peekOfCode": "class UserProfileView(APIView):\n    \"\"\"\n    GET /users/<uuid:user_id>/profile\n    \"\"\"\n    permission_classes = [permissions.IsAuthenticated]  # yoki admin-only qilish mumkin\n    def get(self, request, user_id):\n        user = get_object_or_404(User, id=user_id)\n        ser = UserProfileSerializer(user, context={\"request\": request})\n        return Response(ser.data, status=200)\nclass UserActivityStatsView(APIView):",
        "detail": "mainApp.views",
        "documentation": {}
    },
    {
        "label": "UserActivityStatsView",
        "kind": 6,
        "importPath": "mainApp.views",
        "description": "mainApp.views",
        "peekOfCode": "class UserActivityStatsView(APIView):\n    \"\"\"\n    GET /users/<uuid:user_id>/activity\n    Shu userning har kuni nechta attempt qilganini qaytaradi\n    \"\"\"\n    permission_classes = [permissions.IsAuthenticated]\n    def get(self, request, user_id):\n        user = get_object_or_404(User, id=user_id)\n        # Kun bo‘yicha guruhlash\n        stats = (",
        "detail": "mainApp.views",
        "documentation": {}
    },
    {
        "label": "UserRatingListView",
        "kind": 6,
        "importPath": "mainApp.views",
        "description": "mainApp.views",
        "peekOfCode": "class UserRatingListView(ListAPIView):\n    serializer_class = UserRatingSerializer\n    permission_classes = [permissions.IsAuthenticated]\n    search_fields = [\"username\", \"first_name\", \"last_name\", \"email\"]\n    filter_backends = [filters.SearchFilter]\n    def get_queryset(self):\n        filter_type = self.request.query_params.get(\"filter\", \"best_avg\")\n        group_id = self.request.query_params.get(\"group_id\")\n        subject_id = self.request.query_params.get(\"subject_id\")  # 🔥 qo‘shildi\n        theme_id = self.request.query_params.get(\"theme_id\")",
        "detail": "mainApp.views",
        "documentation": {}
    },
    {
        "label": "SubjectStatsView",
        "kind": 6,
        "importPath": "mainApp.views",
        "description": "mainApp.views",
        "peekOfCode": "class SubjectStatsView(APIView):\n    \"\"\"\n    GET /subjects/<uuid:subject_id>/stats?page=1&page_size=10\n    Fan bo‘yicha umumiy statistika + top foydalanuvchilar (pagination bilan)\n    \"\"\"\n    permission_classes = [permissions.IsAuthenticated]\n    def get(self, request, subject_id):\n        subject = get_object_or_404(Subject, id=subject_id)\n        attempts = TestAttempt.objects.filter(\n            test__theme__subject=subject,",
        "detail": "mainApp.views",
        "documentation": {}
    },
    {
        "label": "ThemeStatsView",
        "kind": 6,
        "importPath": "mainApp.views",
        "description": "mainApp.views",
        "peekOfCode": "class ThemeStatsView(APIView):\n    \"\"\"\n    GET /themes/<uuid:theme_id>/stats?page=1&page_size=10\n    Mavzu bo‘yicha umumiy statistika + top foydalanuvchilar (pagination bilan)\n    \"\"\"\n    permission_classes = [permissions.IsAuthenticated]\n    def get(self, request, theme_id):\n        theme = get_object_or_404(Theme, id=theme_id)\n        attempts = TestAttempt.objects.filter(\n            test__theme=theme,",
        "detail": "mainApp.views",
        "documentation": {}
    },
    {
        "label": "ProfilePhotoUpdateView",
        "kind": 6,
        "importPath": "mainApp.views",
        "description": "mainApp.views",
        "peekOfCode": "class ProfilePhotoUpdateView(APIView):\n    \"\"\"\n    POST /me/profile/photo  → profil rasmini yangilash\n    DELETE /me/profile/photo → profil rasmini o‘chirish\n    \"\"\"\n    permission_classes = [permissions.IsAuthenticated]\n    def post(self, request):\n        serializer = ProfilePhotoUpdateSerializer(\n            request.user, data=request.data, partial=True\n        )",
        "detail": "mainApp.views",
        "documentation": {}
    },
    {
        "label": "ThemeStatsView",
        "kind": 6,
        "importPath": "mainApp.views",
        "description": "mainApp.views",
        "peekOfCode": "class ThemeStatsView(APIView):\n    \"\"\"\n    GET /themes/<uuid:theme_id>/stats\n    Mavzu bo‘yicha umumiy statistika\n    \"\"\"\n    permission_classes = [permissions.IsAuthenticated]\n    def get(self, request, theme_id):\n        theme = get_object_or_404(Theme, id=theme_id)\n        attempts = TestAttempt.objects.filter(\n            test__theme=theme,",
        "detail": "mainApp.views",
        "documentation": {}
    },
    {
        "label": "ThemeTopUsersView",
        "kind": 6,
        "importPath": "mainApp.views",
        "description": "mainApp.views",
        "peekOfCode": "class ThemeTopUsersView(ListAPIView):\n    \"\"\"\n    GET /themes/<uuid:theme_id>/top-users?page=1&page_size=10\n    Har bir foydalanuvchining shu mavzudagi ENG YAXSHI attempti bo'yicha top-list (pagination)\n    Reyting: ko'p to'g'ri -> qisqa vaqt -> baland score\n    \"\"\"\n    serializer_class = TopAttemptSerializer\n    permission_classes = [permissions.IsAuthenticated]\n    def get_queryset(self):\n        theme = get_object_or_404(Theme, id=self.kwargs[\"theme_id\"])",
        "detail": "mainApp.views",
        "documentation": {}
    },
    {
        "label": "CreateTheme",
        "kind": 6,
        "importPath": "mainApp.views",
        "description": "mainApp.views",
        "peekOfCode": "class CreateTheme(CreateAPIView):\n    queryset = Theme.objects.all()\n    serializer_class = ThemeSerializer\nclass CreateSubject(CreateAPIView):\n    queryset = Subject.objects.all()\n    serializer_class = CreateSubjectSerializer\n# Top list\nclass GroupThemesView(ListAPIView):\n    serializer_class = ThemeBasicInfoSerializer\n    permission_classes = [permissions.IsAuthenticated]",
        "detail": "mainApp.views",
        "documentation": {}
    },
    {
        "label": "CreateSubject",
        "kind": 6,
        "importPath": "mainApp.views",
        "description": "mainApp.views",
        "peekOfCode": "class CreateSubject(CreateAPIView):\n    queryset = Subject.objects.all()\n    serializer_class = CreateSubjectSerializer\n# Top list\nclass GroupThemesView(ListAPIView):\n    serializer_class = ThemeBasicInfoSerializer\n    permission_classes = [permissions.IsAuthenticated]\n    def get_queryset(self):\n        group_id = self.kwargs[\"group_id\"]\n        return Theme.objects.filter(subject__groups__id=group_id)",
        "detail": "mainApp.views",
        "documentation": {}
    },
    {
        "label": "GroupThemesView",
        "kind": 6,
        "importPath": "mainApp.views",
        "description": "mainApp.views",
        "peekOfCode": "class GroupThemesView(ListAPIView):\n    serializer_class = ThemeBasicInfoSerializer\n    permission_classes = [permissions.IsAuthenticated]\n    def get_queryset(self):\n        group_id = self.kwargs[\"group_id\"]\n        return Theme.objects.filter(subject__groups__id=group_id)\nclass GroupSubjectsView(ListAPIView):\n    serializer_class = SubjectBasicSerializer\n    permission_classes = [permissions.IsAuthenticated]\n    def get_queryset(self):",
        "detail": "mainApp.views",
        "documentation": {}
    },
    {
        "label": "GroupSubjectsView",
        "kind": 6,
        "importPath": "mainApp.views",
        "description": "mainApp.views",
        "peekOfCode": "class GroupSubjectsView(ListAPIView):\n    serializer_class = SubjectBasicSerializer\n    permission_classes = [permissions.IsAuthenticated]\n    def get_queryset(self):\n        group_id = self.kwargs[\"group_id\"]\n        return Subject.objects.filter(groups__id=group_id)",
        "detail": "mainApp.views",
        "documentation": {}
    },
    {
        "label": "CACHE_PREFIX",
        "kind": 5,
        "importPath": "mainApp.views",
        "description": "mainApp.views",
        "peekOfCode": "CACHE_PREFIX = \"attempt_meta:\"\ndef _cache_key(attempt_id):\n    return f\"{CACHE_PREFIX}{attempt_id}\"\ndef _now():\n    return timezone.now()\ndef _expires(started_at, minutes):\n    return started_at + datetime.timedelta(minutes=minutes)\nclass AttemptStartView(APIView):\n    permission_classes = [permissions.IsAuthenticated]\n    def get(self, request, theme_id):",
        "detail": "mainApp.views",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "notifications.migrations.0001_initial",
        "description": "notifications.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n        migrations.swappable_dependency(settings.AUTH_USER_MODEL),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='DeviceToken',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),",
        "detail": "notifications.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "NotificationsConfig",
        "kind": 6,
        "importPath": "notifications.apps",
        "description": "notifications.apps",
        "peekOfCode": "class NotificationsConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'notifications'\n    def ready(self):\n        import notifications.signals",
        "detail": "notifications.apps",
        "documentation": {}
    },
    {
        "label": "DeviceToken",
        "kind": 6,
        "importPath": "notifications.models",
        "description": "notifications.models",
        "peekOfCode": "class DeviceToken(models.Model):\n    user = models.ForeignKey(User, on_delete=models.CASCADE)\n    token = models.TextField(unique=True)\n    created_at = models.DateTimeField(auto_now_add=True)\n    def __str__(self):\n        return f\"DeviceToken({self.user.username})\"",
        "detail": "notifications.models",
        "documentation": {}
    },
    {
        "label": "DeviceTokenSerializer",
        "kind": 6,
        "importPath": "notifications.serializers",
        "description": "notifications.serializers",
        "peekOfCode": "class DeviceTokenSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = DeviceToken\n        fields = [\"token\"]",
        "detail": "notifications.serializers",
        "documentation": {}
    },
    {
        "label": "notify_new_theme",
        "kind": 2,
        "importPath": "notifications.signals",
        "description": "notifications.signals",
        "peekOfCode": "def notify_new_theme(sender, instance, created, **kwargs):\n    if not created:\n        return\n    subject = instance.subject\n    groups = subject.groups.all()\n    # Guruh talabalari va authorlari\n    students = User.objects.filter(group__in=groups, role=\"student\")\n    authors = User.objects.filter(group__in=groups, role=\"teacher\")\n    receivers = students.union(authors)\n    user_ids = list(receivers.values_list(\"id\", flat=True))",
        "detail": "notifications.signals",
        "documentation": {}
    },
    {
        "label": "notify_new_test",
        "kind": 2,
        "importPath": "notifications.signals",
        "description": "notifications.signals",
        "peekOfCode": "def notify_new_test(sender, instance, created, **kwargs):\n    if not created:\n        return\n    print(\"keldi\")\n    subject = instance.theme.subject\n    groups = subject.groups.all()\n    # Guruh talabalari va authorlari\n    students = User.objects.filter(group__in=groups, role=\"student\")\n    authors = User.objects.filter(group__in=groups, role=\"teacher\")\n    receivers = students.union(authors)",
        "detail": "notifications.signals",
        "documentation": {}
    },
    {
        "label": "send_push_to_users",
        "kind": 2,
        "importPath": "notifications.tasks",
        "description": "notifications.tasks",
        "peekOfCode": "def send_push_to_users(user_ids, title, body):\n    from mainApp.models import User  # ichida import qilamiz\n    users = User.objects.filter(id__in=user_ids)\n    for user in users:\n        for dev in DeviceToken.objects.filter(user=user):\n            send_push_fcm(dev.token, title, body)",
        "detail": "notifications.tasks",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "notifications.urls",
        "description": "notifications.urls",
        "peekOfCode": "urlpatterns = [\n    path(\"save-token/\", SaveTokenView.as_view(), name=\"save_token\"),\n    path(\"push-test/\", TemplateView.as_view(template_name=\"push-test.html\")),\n]",
        "detail": "notifications.urls",
        "documentation": {}
    },
    {
        "label": "SaveTokenView",
        "kind": 6,
        "importPath": "notifications.views",
        "description": "notifications.views",
        "peekOfCode": "class SaveTokenView(generics.CreateAPIView):\n    serializer_class = DeviceTokenSerializer\n    permission_classes = [permissions.IsAuthenticated]\n    def perform_create(self, serializer):\n        token = serializer.validated_data[\"token\"]\n        DeviceToken.objects.update_or_create(\n            user=self.request.user,\n            token=token,\n            defaults={\"user\": self.request.user}\n        )",
        "detail": "notifications.views",
        "documentation": {}
    },
    {
        "label": "StatisticConfig",
        "kind": 6,
        "importPath": "statistic.apps",
        "description": "statistic.apps",
        "peekOfCode": "class StatisticConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'statistic'",
        "detail": "statistic.apps",
        "documentation": {}
    },
    {
        "label": "UserStatsSerializer",
        "kind": 6,
        "importPath": "statistic.serializers",
        "description": "statistic.serializers",
        "peekOfCode": "class UserStatsSerializer(serializers.Serializer):\n    total_users = serializers.IntegerField()\n    students_count = serializers.IntegerField()\n    active_users = serializers.IntegerField(required=False)\nclass SubjectStatSerializer(serializers.Serializer):\n    subject_id = serializers.UUIDField()\n    subject_name = serializers.CharField()\n    student_count = serializers.IntegerField()\n    avg_score = serializers.FloatField()\nclass GroupStatInSubjectSerializer(serializers.ModelSerializer):",
        "detail": "statistic.serializers",
        "documentation": {}
    },
    {
        "label": "SubjectStatSerializer",
        "kind": 6,
        "importPath": "statistic.serializers",
        "description": "statistic.serializers",
        "peekOfCode": "class SubjectStatSerializer(serializers.Serializer):\n    subject_id = serializers.UUIDField()\n    subject_name = serializers.CharField()\n    student_count = serializers.IntegerField()\n    avg_score = serializers.FloatField()\nclass GroupStatInSubjectSerializer(serializers.ModelSerializer):\n    student_count = serializers.IntegerField()\n    avg_score = serializers.FloatField()\n    total_attempts = serializers.IntegerField()\n    class Meta:",
        "detail": "statistic.serializers",
        "documentation": {}
    },
    {
        "label": "GroupStatInSubjectSerializer",
        "kind": 6,
        "importPath": "statistic.serializers",
        "description": "statistic.serializers",
        "peekOfCode": "class GroupStatInSubjectSerializer(serializers.ModelSerializer):\n    student_count = serializers.IntegerField()\n    avg_score = serializers.FloatField()\n    total_attempts = serializers.IntegerField()\n    class Meta:\n        model = Group\n        fields = [\"id\", \"name\", \"kurs\", \"student_count\", \"avg_score\", \"total_attempts\"]\nclass UserStatSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = User",
        "detail": "statistic.serializers",
        "documentation": {}
    },
    {
        "label": "UserStatSerializer",
        "kind": 6,
        "importPath": "statistic.serializers",
        "description": "statistic.serializers",
        "peekOfCode": "class UserStatSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = User\n        fields = [\"id\", \"username\", \"first_name\", \"last_name\", \"group\", \"total_attempts\", \"total_correct\", \"total_wrong\", \"average_score\"]",
        "detail": "statistic.serializers",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "statistic.urls",
        "description": "statistic.urls",
        "peekOfCode": "urlpatterns = [\n    path(\"users/\", UserFullStatsView.as_view(), name=\"user-full-stats\"),\n    path(\"tests/\", TestStatsView.as_view(), name=\"test-full-stats\"),\n    path(\"subjects/<uuid:subject_id>/stats\", SubjectThemeStatsView.as_view(), name=\"subject-stats\"),\n    path(\"subjects/<uuid:subject_id>/themes/<uuid:theme_id>/stats\", SubjectThemeStatsView.as_view(), name=\"theme-stats\"),\n    path(\"stats/subject/<uuid:pk>/\", SubjectStatView.as_view(), name=\"subject-stat\"),\n    path(\"stats/subject/<uuid:pk>/groups/\", GroupStatInSubjectView.as_view(), name=\"subject-group-stats\"),\n    path(\"stats/subject/<uuid:subject_id>/groups/<uuid:group_id>/users/\", GroupUserStatInSubjectView.as_view(), name=\"subject-group-user-stats\"),\n]",
        "detail": "statistic.urls",
        "documentation": {}
    },
    {
        "label": "UserFullStatsView",
        "kind": 6,
        "importPath": "statistic.views",
        "description": "statistic.views",
        "peekOfCode": "class UserFullStatsView(APIView):\n    def get(self, request):\n        qs = User.objects.all()\n        total_users = qs.count()\n        students_count = qs.filter(role=\"student\").count()\n        teachers_count = qs.filter(role=\"teacher\").count()\n        admins_count = qs.filter(role=\"admin\").count()\n        groups_count = qs.exclude(group=None).values(\"group\").distinct().count()\n        total_attempts_sum = qs.aggregate(total=Sum(\"total_attempts\"))[\"total\"] or 0\n        avg_attempts_per_user = round(total_attempts_sum / total_users, 2) if total_users > 0 else 0",
        "detail": "statistic.views",
        "documentation": {}
    },
    {
        "label": "TestStatsView",
        "kind": 6,
        "importPath": "statistic.views",
        "description": "statistic.views",
        "peekOfCode": "class TestStatsView(APIView):\n    def get(self, request):\n        attempts = TestAttempt.objects.all()\n        answers = Answer.objects.all()\n        total_tests = Question.objects.count()\n        total_attempts = attempts.count()\n        avg_score = attempts.aggregate(avg=Avg(\"score\"))[\"avg\"] or 0.0\n        # Javoblar statistikasi\n        total_answers = answers.count()\n        correct_answers = answers.filter(is_correct=True).count()",
        "detail": "statistic.views",
        "documentation": {}
    },
    {
        "label": "SubjectThemeStatsView",
        "kind": 6,
        "importPath": "statistic.views",
        "description": "statistic.views",
        "peekOfCode": "class SubjectThemeStatsView(ListAPIView):\n    \"\"\"\n    GET /subjects/<subject_id>/stats\n    GET /subjects/<subject_id>/themes/<theme_id>/stats\n    \"\"\"\n    def get_queryset(self):\n        subject_id = self.kwargs.get(\"subject_id\")\n        theme_id = self.kwargs.get(\"theme_id\")\n        subject_attempts = TestAttempt.objects.filter(test__theme__subject_id=subject_id)\n        qs = User.objects.filter(role=\"student\")",
        "detail": "statistic.views",
        "documentation": {}
    },
    {
        "label": "SubjectStatView",
        "kind": 6,
        "importPath": "statistic.views",
        "description": "statistic.views",
        "peekOfCode": "class SubjectStatView(generics.RetrieveAPIView):\n    serializer_class = SubjectStatSerializer\n    def get_object(self):\n        subject_id = self.kwargs[\"pk\"]\n        subject = Subject.objects.get(id=subject_id)\n        user = self.request.user\n        qs = User.objects.filter(\n            role=\"student\",\n            attempts__test__theme__subject=subject,\n        )",
        "detail": "statistic.views",
        "documentation": {}
    },
    {
        "label": "GroupStatInSubjectView",
        "kind": 6,
        "importPath": "statistic.views",
        "description": "statistic.views",
        "peekOfCode": "class GroupStatInSubjectView(generics.ListAPIView):\n    serializer_class = GroupStatInSubjectSerializer\n    def get_queryset(self):\n        subject_id = self.kwargs[\"pk\"]\n        user = self.request.user\n        qs = Group.objects.filter(\n            user__role=\"student\",\n            user__attempts__test__theme__subject_id=subject_id,\n        )\n        if user.role == \"student\" and user.group:",
        "detail": "statistic.views",
        "documentation": {}
    },
    {
        "label": "GroupUserStatInSubjectView",
        "kind": 6,
        "importPath": "statistic.views",
        "description": "statistic.views",
        "peekOfCode": "class GroupUserStatInSubjectView(generics.ListAPIView):\n    serializer_class = UserStatSerializer\n    def get_queryset(self):\n        subject_id = self.kwargs[\"subject_id\"]\n        group_id = self.kwargs[\"group_id\"]\n        user = self.request.user\n        qs = User.objects.filter(\n            role=\"student\",\n            group_id=group_id,\n            attempts__test__theme__subject_id=subject_id,",
        "detail": "statistic.views",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "kind": 6,
        "importPath": "utils.models",
        "description": "utils.models",
        "peekOfCode": "class BaseModel(models.Model):\n    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)\n    created = models.DateTimeField(auto_now_add=True)\n    updated = models.DateTimeField(auto_now=True)\n    def __str__(self):\n        return str(self.id)\n    class Meta:\n        abstract = True",
        "detail": "utils.models",
        "documentation": {}
    },
    {
        "label": "WordTestReader",
        "kind": 6,
        "importPath": "utils.parsers",
        "description": "utils.parsers",
        "peekOfCode": "class WordTestReader:\n    def __init__(self):\n        self.questions = []\n        self.document = None\n    def read_test_file(self, file_path):\n        if not DOCX_AVAILABLE:\n            return {'success': False, 'error': 'python-docx kutubxonasi o\\'rnatilmagan', 'questions': []}\n        try:\n            self.document = docx.Document(file_path)\n            print(",
        "detail": "utils.parsers",
        "documentation": {}
    },
    {
        "label": "save_image_to_django",
        "kind": 2,
        "importPath": "utils.parsers",
        "description": "utils.parsers",
        "peekOfCode": "def save_image_to_django(image_data, extension, prefix=\"question\"):\n    \"\"\"Rasm ma'lumotlarini Django FileField uchun tayyorlash\"\"\"\n    if not image_data:\n        return None\n    try:\n        from django.core.files.base import ContentFile\n        import uuid\n        filename = f\"{prefix}_{uuid.uuid4().hex[:8]}.{extension}\"\n        if isinstance(image_data, dict):\n            raw_data = image_data.get('data')",
        "detail": "utils.parsers",
        "documentation": {}
    },
    {
        "label": "parse_word_file_advanced",
        "kind": 2,
        "importPath": "utils.parsers",
        "description": "utils.parsers",
        "peekOfCode": "def parse_word_file_advanced(file_path):\n    \"\"\"Django signals uchun parser funksiya\"\"\"\n    print(f\"=== WORD FAYL PARSE QILISH BOSHLANDI ===\")\n    print(f\"Fayl yo'li: {file_path}\")\n    try:\n        if not DOCX_AVAILABLE:\n            print(\"XATOLIK: python-docx kutubxonasi o'rnatilmagan!\")\n            return []\n        reader = WordTestReader()\n        result = reader.read_test_file(file_path)",
        "detail": "utils.parsers",
        "documentation": {}
    },
    {
        "label": "debug_word_images",
        "kind": 2,
        "importPath": "utils.parsers",
        "description": "utils.parsers",
        "peekOfCode": "def debug_word_images(file_path):\n    \"\"\"Debug funksiya\"\"\"\n    try:\n        reader = WordTestReader()\n        reader.document = docx.Document(file_path)\n        reader.debug_all_images()\n    except Exception as e:\n        print(f\"Debug xatolik: {e}\")\n# Eski funksiyalar\ndef debug_word_file(file_path):",
        "detail": "utils.parsers",
        "documentation": {}
    },
    {
        "label": "debug_word_file",
        "kind": 2,
        "importPath": "utils.parsers",
        "description": "utils.parsers",
        "peekOfCode": "def debug_word_file(file_path):\n    debug_word_images(file_path)\ndef parse_word_file_simple(file_path):\n    return parse_word_file_advanced(file_path)\ndef test_parsing(file_path):\n    return parse_word_file_advanced(file_path)",
        "detail": "utils.parsers",
        "documentation": {}
    },
    {
        "label": "parse_word_file_simple",
        "kind": 2,
        "importPath": "utils.parsers",
        "description": "utils.parsers",
        "peekOfCode": "def parse_word_file_simple(file_path):\n    return parse_word_file_advanced(file_path)\ndef test_parsing(file_path):\n    return parse_word_file_advanced(file_path)",
        "detail": "utils.parsers",
        "documentation": {}
    },
    {
        "label": "test_parsing",
        "kind": 2,
        "importPath": "utils.parsers",
        "description": "utils.parsers",
        "peekOfCode": "def test_parsing(file_path):\n    return parse_word_file_advanced(file_path)",
        "detail": "utils.parsers",
        "documentation": {}
    },
    {
        "label": "send_push_fcm",
        "kind": 2,
        "importPath": "utils.push_fcm",
        "description": "utils.push_fcm",
        "peekOfCode": "def send_push_fcm(token: str, title: str, body: str):\n    message = messaging.Message(\n        notification=messaging.Notification(title=title, body=body),\n        token=token\n    )\n    return messaging.send(message)",
        "detail": "utils.push_fcm",
        "documentation": {}
    },
    {
        "label": "cred_path",
        "kind": 5,
        "importPath": "utils.push_fcm",
        "description": "utils.push_fcm",
        "peekOfCode": "cred_path = Path(__file__).resolve().parent.parent / \"serviceAccount.json\"\ncred = credentials.Certificate(str(cred_path))\n# initialize faqat 1 marta bo‘lishi kerak\nif not firebase_admin._apps:\n    firebase_admin.initialize_app(cred)\ndef send_push_fcm(token: str, title: str, body: str):\n    message = messaging.Message(\n        notification=messaging.Notification(title=title, body=body),\n        token=token\n    )",
        "detail": "utils.push_fcm",
        "documentation": {}
    },
    {
        "label": "cred",
        "kind": 5,
        "importPath": "utils.push_fcm",
        "description": "utils.push_fcm",
        "peekOfCode": "cred = credentials.Certificate(str(cred_path))\n# initialize faqat 1 marta bo‘lishi kerak\nif not firebase_admin._apps:\n    firebase_admin.initialize_app(cred)\ndef send_push_fcm(token: str, title: str, body: str):\n    message = messaging.Message(\n        notification=messaging.Notification(title=title, body=body),\n        token=token\n    )\n    return messaging.send(message)",
        "detail": "utils.push_fcm",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "manage",
        "description": "manage",
        "peekOfCode": "def main():\n    \"\"\"Run administrative tasks.\"\"\"\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'config.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"",
        "detail": "manage",
        "documentation": {}
    },
    {
        "label": "b64url",
        "kind": 2,
        "importPath": "test",
        "description": "test",
        "peekOfCode": "def b64url(data: bytes) -> str:\n    return base64.urlsafe_b64encode(data).decode().rstrip(\"=\")\n# 32-byte integer sifatida private key\nprivate_bytes = private_key.private_numbers().private_value.to_bytes(32, \"big\")\nprint(\"VAPID_PRIVATE_KEY=\", b64url(private_bytes))\nprint(\"VAPID_PUBLIC_KEY=\", b64url(public_key))",
        "detail": "test",
        "documentation": {}
    },
    {
        "label": "private_key",
        "kind": 5,
        "importPath": "test",
        "description": "test",
        "peekOfCode": "private_key = ec.generate_private_key(ec.SECP256R1())\n# Public key (Uncompressed Point, X9.62 formatida)\npublic_key = private_key.public_key().public_bytes(\n    encoding=serialization.Encoding.X962,\n    format=serialization.PublicFormat.UncompressedPoint,\n)\n# base64url funksiyasi\ndef b64url(data: bytes) -> str:\n    return base64.urlsafe_b64encode(data).decode().rstrip(\"=\")\n# 32-byte integer sifatida private key",
        "detail": "test",
        "documentation": {}
    },
    {
        "label": "public_key",
        "kind": 5,
        "importPath": "test",
        "description": "test",
        "peekOfCode": "public_key = private_key.public_key().public_bytes(\n    encoding=serialization.Encoding.X962,\n    format=serialization.PublicFormat.UncompressedPoint,\n)\n# base64url funksiyasi\ndef b64url(data: bytes) -> str:\n    return base64.urlsafe_b64encode(data).decode().rstrip(\"=\")\n# 32-byte integer sifatida private key\nprivate_bytes = private_key.private_numbers().private_value.to_bytes(32, \"big\")\nprint(\"VAPID_PRIVATE_KEY=\", b64url(private_bytes))",
        "detail": "test",
        "documentation": {}
    },
    {
        "label": "private_bytes",
        "kind": 5,
        "importPath": "test",
        "description": "test",
        "peekOfCode": "private_bytes = private_key.private_numbers().private_value.to_bytes(32, \"big\")\nprint(\"VAPID_PRIVATE_KEY=\", b64url(private_bytes))\nprint(\"VAPID_PUBLIC_KEY=\", b64url(public_key))",
        "detail": "test",
        "documentation": {}
    }
]